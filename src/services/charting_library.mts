/* E slint-disable @typescript-eslint/no-explicit-any */
// Generated by dts-bundle-generator v5.3.0

// Declare const dateFormatFunctions: {
//   "dd MMM 'yy": (date: Date, local: boolean) => string
//   'MMM dd, yyyy': (date: Date, local: boolean) => string
//   'MMM dd': (date: Date, local: boolean) => string
//   'yyyy-MM-dd': (date: Date, local: boolean) => string
//   'yy-MM-dd': (date: Date, local: boolean) => string
//   'yy/MM/dd': (date: Date, local: boolean) => string
//   'yyyy/MM/dd': (date: Date, local: boolean) => string
//   'dd-MM-yyyy': (date: Date, local: boolean) => string
//   'dd-MM-yy': (date: Date, local: boolean) => string
//   'dd/MM/yy': (date: Date, local: boolean) => string
//   'dd/MM/yyyy': (date: Date, local: boolean) => string
//   'MM/dd/yy': (date: Date, local: boolean) => string
//   'MM/dd/yyyy': (date: Date, local: boolean) => string
// }
// Declare enum OrderOrPositionMessageType {
//   Information = 'information',
//   Warning = 'warning',
//   Error = 'error',
// }
// Declare enum StopType {
//   StopLoss = 0,
//   TrailingStop = 1,
// }
// Export declare const enum ActionId {
//   ChartAddIndicatorToAllCharts = 'Chart.AddIndicatorToAllCharts',
//   ChartAddSymbolToWatchList = 'Chart.AddSymbolToWatchList',
//   ChartApplyIndicatorsToAllCharts = 'Chart.ApplyIndicatorsToAllCharts',
//   ChartChangeTimeZone = 'Chart.ChangeTimeZone',
//   ChartClipboardCopyLineTools = 'Chart.Clipboard.CopyLineTools',
//   ChartClipboardCopySource = 'Chart.Clipboard.CopySource',
//   ChartClipboardPasteSource = 'Chart.Clipboard.PasteSource',
//   ChartCrosshairLockVerticalCursor = 'Chart.Crosshair.LockVerticalCursor',
//   ChartCrosshairPlusButtonDrawHorizontalLine = 'Chart.Crosshair.PlusButton.DrawHorizontalLine',
//   ChartCustomActionId = 'Chart.CustomActionId',
//   ChartDialogsShowChangeInterval = 'Chart.Dialogs.ShowChangeInterval',
//   ChartDialogsShowChangeSymbol = 'Chart.Dialogs.ShowChangeSymbol',
//   ChartDialogsShowCompareOrAddSymbol = 'Chart.Dialogs.ShowCompareOrAddSymbol',
//   ChartDialogsShowGeneralSettings = 'Chart.Dialogs.ShowGeneralSettings',
//   ChartDialogsShowGeneralSettingsLegendTab = 'Chart.Dialogs.ShowGeneralSettings.LegendTab',
//   ChartDialogsShowGeneralSettingsScalesTab = 'Chart.Dialogs.ShowGeneralSettings.ScalesTab',
//   ChartDialogsShowGeneralSettingsSymbolTab = 'Chart.Dialogs.ShowGeneralSettings.SymbolTab',
//   ChartDialogsShowGoToDate = 'Chart.Dialogs.ShowGoToDate',
//   ChartDialogsShowInsertIndicators = 'Chart.Dialogs.ShowInsertIndicators',
//   ChartDialogsShowSymbolInfo = 'Chart.Dialogs.ShowSymbolInfo',
//   ChartDrawingToolbarToggleVisibility = 'Chart.DrawingToolbar.ToggleVisibility',
//   ChartExternalActionId = 'Chart.ExternalActionId',
//   ChartFavoriteDrawingToolsToolbarHide = 'Chart.FavoriteDrawingToolsToolbar.Hide',
//   ChartIndicatorShowSettingsDialog = 'Chart.Indicator.ShowSettingsDialog',
//   ChartLegendToggleBarChangeValuesVisibility = 'Chart.Legend.ToggleBarChangeValuesVisibility',
//   ChartLegendToggleIndicatorArgumentsVisibility = 'Chart.Legend.ToggleIndicatorArgumentsVisibility',
//   ChartLegendToggleIndicatorTitlesVisibility = 'Chart.Legend.ToggleIndicatorTitlesVisibility',
//   ChartLegendToggleIndicatorValuesVisibility = 'Chart.Legend.ToggleIndicatorValuesVisibility',
//   ChartLegendToggleOhlcValuesVisibility = 'Chart.Legend.ToggleOhlcValuesVisibility',
//   ChartLegendToggleOpenMarketStatusVisibility = 'Chart.Legend.ToggleOpenMarketStatusVisibility',
//   ChartLegendToggleSymbolVisibility = 'Chart.Legend.ToggleSymbolVisibility',
//   ChartLegendToggleVolumeVisibility = 'Chart.Legend.ToggleVolumeVisibility',
//   ChartLines = 'Chart.Lines',
//   ChartLinesToggleBidAskLinesVisibility = 'Chart.Lines.ToggleBidAskLinesVisibility',
//   ChartLinesToggleHighLowLinesVisibility = 'Chart.Lines.ToggleHighLowLinesVisibility',
//   ChartLinesToggleSeriesPrevCloseLineVisibility = 'Chart.Lines.ToggleSeriesPrevCloseLineVisibility',
//   ChartLinesToggleSeriesPriceLineVisibility = 'Chart.Lines.ToggleSeriesPriceLineVisibility',
//   ChartLineToolBarsPatternToggleFlipped = 'Chart.LineTool.BarsPattern.ToggleFlipped',
//   ChartLineToolBarsPatternToggleMirrored = 'Chart.LineTool.BarsPattern.ToggleMirrored',
//   ChartLineToolClone = 'Chart.LineTool.Clone',
//   ChartLineToolCreateLimitOrderFromState = 'Chart.LineTool.CreateLimitOrderFromState',
//   ChartLineToolElliotChangeDegreeProperty = 'Chart.LineTool.Elliot.ChangeDegreeProperty',
//   ChartLineToolNoSync = 'Chart.LineTool.NoSync',
//   ChartLineToolPitchforkChangeTypeToInside = 'Chart.LineTool.Pitchfork.ChangeTypeToInside',
//   ChartLineToolPitchforkChangeTypeToModifiedSchiff = 'Chart.LineTool.Pitchfork.ChangeTypeToModifiedSchiff',
//   ChartLineToolPitchforkChangeTypeToOriginal = 'Chart.LineTool.Pitchfork.ChangeTypeToOriginal',
//   ChartLineToolPitchforkChangeTypeToSchiff = 'Chart.LineTool.Pitchfork.ChangeTypeToSchiff',
//   ChartLineToolSyncInLayout = 'Chart.LineTool.SyncInLayout',
//   ChartLineToolTemplates = 'Chart.LineTool.Templates',
//   ChartLineToolTemplatesApply = 'Chart.LineTool.Templates.Apply',
//   ChartLineToolTemplatesApplyDefaults = 'Chart.LineTool.Templates.ApplyDefaults',
//   ChartLineToolTemplatesSaveAs = 'Chart.LineTool.Templates.SaveAs',
//   ChartLineToolToolbarChangeFontSizeProperty = 'Chart.LineTool.Toolbar.ChangeFontSizeProperty',
//   ChartLineToolToolbarChangeLineStyleToDashed = 'Chart.LineTool.Toolbar.ChangeLineStyleToDashed',
//   ChartLineToolToolbarChangeLineStyleToDotted = 'Chart.LineTool.Toolbar.ChangeLineStyleToDotted',
//   ChartLineToolToolbarChangeLineStyleToSolid = 'Chart.LineTool.Toolbar.ChangeLineStyleToSolid',
//   ChartMarksToggleVisibility = 'Chart.Marks.ToggleVisibility',
//   ChartMoveChartInLayout = 'Chart.MoveChartInLayout',
//   ChartMoveChartInLayoutBack = 'Chart.MoveChartInLayout.Back',
//   ChartMoveChartInLayoutForward = 'Chart.MoveChartInLayout.Forward',
//   ChartObjectTreeShow = 'Chart.ObjectTree.Show',
//   ChartPaneControlsDeletePane = 'Chart.PaneControls.DeletePane',
//   ChartPaneControlsMaximizePane = 'Chart.PaneControls.MaximizePane',
//   ChartPaneControlsMinimizePane = 'Chart.PaneControls.MinimizePane',
//   ChartPaneControlsMovePaneDown = 'Chart.PaneControls.MovePaneDown',
//   ChartPaneControlsMovePaneUp = 'Chart.PaneControls.MovePaneUp',
//   ChartPriceScaleLabels = 'Chart.PriceScale.Labels',
//   ChartPriceScaleLabelsToggleBidAskLabelsVisibility = 'Chart.PriceScale.Labels.ToggleBidAskLabelsVisibility',
//   ChartPriceScaleLabelsToggleHighLowPriceLabelsVisibility = 'Chart.PriceScale.Labels.ToggleHighLowPriceLabelsVisibility',
//   ChartPriceScaleLabelsToggleIndicatorsNameLabelsVisibility = 'Chart.PriceScale.Labels.ToggleIndicatorsNameLabelsVisibility',
//   ChartPriceScaleLabelsToggleIndicatorsValueLabelsVisibility = 'Chart.PriceScale.Labels.ToggleIndicatorsValueLabelsVisibility',
//   ChartPriceScaleLabelsToggleNoOverlappingLabelsVisibility = 'Chart.PriceScale.Labels.ToggleNoOverlappingLabelsVisibility',
//   ChartPriceScaleLabelsToggleSeriesLastValueVisibility = 'Chart.PriceScale.Labels.ToggleSeriesLastValueVisibility',
//   ChartPriceScaleLabelsToggleSymbolNameLabelsVisibility = 'Chart.PriceScale.Labels.ToggleSymbolNameLabelsVisibility',
//   ChartPriceScaleLabelsToggleSymbolPrevCloseValueVisibility = 'Chart.PriceScale.Labels.ToggleSymbolPrevCloseValueVisibility',
//   ChartPriceScaleMergeAllScales = 'Chart.PriceScale.MergeAllScales',
//   ChartPriceScaleMergeAllScalesToLeft = 'Chart.PriceScale.MergeAllScalesToLeft',
//   ChartPriceScaleMergeAllScalesToRight = 'Chart.PriceScale.MergeAllScalesToRight',
//   ChartPriceScaleMoveToLeft = 'Chart.PriceScale.MoveToLeft',
//   ChartPriceScaleMoveToRight = 'Chart.PriceScale.MoveToRight',
//   ChartPriceScaleReset = 'Chart.PriceScale.Reset',
//   ChartPriceScaleToggleAddOrderPlusButtonVisibility = 'Chart.PriceScale.ToggleAddOrderPlusButtonVisibility',
//   ChartPriceScaleToggleAutoScale = 'Chart.PriceScale.ToggleAutoScale',
//   ChartPriceScaleToggleAutoScaleSeriesOnly = 'Chart.PriceScale.ToggleAutoScaleSeriesOnly',
//   ChartPriceScaleToggleCountdownToBarCloseVisibility = 'Chart.PriceScale.ToggleCountdownToBarCloseVisibility',
//   ChartPriceScaleToggleCurrencyVisibility = 'Chart.PriceScale.ToggleCurrencyVisibility',
//   ChartPriceScaleToggleIndexedTo100 = 'Chart.PriceScale.ToggleIndexedTo100',
//   ChartPriceScaleToggleInvertScale = 'Chart.PriceScale.ToggleInvertScale',
//   ChartPriceScaleToggleLogarithmic = 'Chart.PriceScale.ToggleLogarithmic',
//   ChartPriceScaleTogglePercentage = 'Chart.PriceScale.TogglePercentage',
//   ChartPriceScaleToggleRegular = 'Chart.PriceScale.ToggleRegular',
//   ChartPriceScaleToggleUnitVisibility = 'Chart.PriceScale.ToggleUnitVisibility',
//   ChartRedo = 'Chart.Redo',
//   ChartRemoveAllIndicators = 'Chart.RemoveAllIndicators',
//   ChartRemoveAllIndicatorsAndLineTools = 'Chart.RemoveAllIndicatorsAndLineTools',
//   ChartRemoveAllLineTools = 'Chart.RemoveAllLineTools',
//   ChartScalesReset = 'Chart.Scales.Reset',
//   ChartScalesToggleLockPriceToBarRatio = 'Chart.Scales.ToggleLockPriceToBarRatio',
//   ChartScrollToLineTool = 'Chart.ScrollToLineTool',
//   ChartSelectedObjectHide = 'Chart.SelectedObject.Hide',
//   ChartSelectedObjectRemove = 'Chart.SelectedObject.Remove',
//   ChartSelectedObjectShow = 'Chart.SelectedObject.Show',
//   ChartSelectedObjectShowSettingsDialog = 'Chart.SelectedObject.ShowSettingsDialog',
//   ChartSelectedObjectToggleLocked = 'Chart.SelectedObject.ToggleLocked',
//   ChartSeriesPriceScaleToggleAutoScale = 'Chart.Series.PriceScale.ToggleAutoScale',
//   ChartSeriesPriceScaleToggleIndexedTo100 = 'Chart.Series.PriceScale.ToggleIndexedTo100',
//   ChartSeriesPriceScaleToggleInvertPriceScale = 'Chart.Series.PriceScale.ToggleInvertPriceScale',
//   ChartSeriesPriceScaleToggleLogarithmic = 'Chart.Series.PriceScale.ToggleLogarithmic',
//   ChartSeriesPriceScaleTogglePercentage = 'Chart.Series.PriceScale.TogglePercentage',
//   ChartSeriesPriceScaleToggleRegular = 'Chart.Series.PriceScale.ToggleRegular',
//   ChartSessionBreaksToggleVisibility = 'Chart.SessionBreaks.ToggleVisibility',
//   ChartSourceChangePriceScale = 'Chart.Source.ChangePriceScale',
//   ChartSourceMergeDown = 'Chart.Source.MergeDown',
//   ChartSourceMergeUp = 'Chart.Source.MergeUp',
//   ChartSourceMoveToNoScale = 'Chart.Source.MoveToNoScale',
//   ChartSourceMoveToOtherScale = 'Chart.Source.MoveToOtherScale',
//   ChartSourceMoveToPane = 'Chart.Source.MoveToPane',
//   ChartSourceUnmergeDown = 'Chart.Source.UnmergeDown',
//   ChartSourceUnmergeUp = 'Chart.Source.UnmergeUp',
//   ChartSourceVisualOrder = 'Chart.Source.VisualOrder',
//   ChartSourceVisualOrderBringForward = 'Chart.Source.VisualOrder.BringForward',
//   ChartSourceVisualOrderBringToFront = 'Chart.Source.VisualOrder.BringToFront',
//   ChartSourceVisualOrderSendBackward = 'Chart.Source.VisualOrder.SendBackward',
//   ChartSourceVisualOrderSendToBack = 'Chart.Source.VisualOrder.SendToBack',
//   ChartTimeScaleReset = 'Chart.TimeScale.Reset',
//   ChartUndo = 'Chart.Undo',
//   ObjectsTreeCreateGroup = 'ObjectsTree.CreateGroup',
//   ObjectsTreeRemoveItem = 'ObjectsTree.RemoveItem',
//   ObjectsTreeRenameItem = 'ObjectsTree.RenameItem',
//   ObjectsTreeToggleItemLocked = 'ObjectsTree.ToggleItemLocked',
//   ObjectsTreeToggleItemVisibility = 'ObjectsTree.ToggleItemVisibility',
//   TradingCancelOrder = 'Trading.CancelOrder',
//   TradingClosePosition = 'Trading.ClosePosition',
//   TradingCustomActionId = 'Trading.CustomActionId',
//   TradingDomePlaceLimitOrder = 'Trading.DomePlaceLimitOrder',
//   TradingDomePlaceMarketOrder = 'Trading.DomePlaceMarketOrder',
//   TradingDomePlaceStopLimitOrder = 'Trading.DomePlaceStopLimitOrder',
//   TradingDomePlaceStopOrder = 'Trading.DomePlaceStopOrder',
//   TradingEditOrder = 'Trading.EditOrder',
//   TradingModifyPosition = 'Trading.ModifyPosition',
//   TradingReversePosition = 'Trading.ReversePosition',
//   TradingSellBuyButtonsToggleVisibility = 'Trading.SellBuyButtonsToggleVisibility',
//   TradingTradeFromChart = 'Trading.TradeFromChart',
// }
// Export declare const enum ChartStyle {
//   Bar = 0,
//   Candle = 1,
//   Line = 2,
//   Area = 3,
//   Renko = 4,
//   Kagi = 5,
//   PnF = 6,
//   LineBreak = 7,
//   HeikinAshi = 8,
//   HollowCandle = 9,
//   Baseline = 10,
//   HiLo = 12,
// }
// Export declare const enum ConnectionStatus {
//   Connected = 1,
//   Connecting = 2,
//   Disconnected = 3,
//   Error = 4,
// }
// Export declare const enum MenuItemType {
//   Separator = 'separator',
//   Action = 'action',
// }
// Export declare const enum NotificationType {
//   Error = 0,
//   Success = 1,
// }
// Export declare const enum OrderStatus {
//   Canceled = 1,
//   Filled = 2,
//   Inactive = 3,
//   Placing = 4,
//   Rejected = 5,
//   Working = 6,
// }
// Export declare const enum OrderStatusFilter {
//   All = 0,
//   Canceled = 1,
//   Filled = 2,
//   Inactive = 3,
//   Rejected = 5,
//   Working = 6,
// }
// Export declare const enum OrderTicketFocusControl {
//   LimitPrice = 1,
//   StopPrice = 2,
//   TakeProfit = 3,
//   StopLoss = 4,
//   Quantity = 5,
// }
// Export declare const enum OrderType {
//   Limit = 1,
//   Market = 2,
//   Stop = 3,
//   StopLimit = 4,
// }
// Export declare const enum ParentType {
//   Order = 1,
//   Position = 2,
//   Trade = 3,
// }
// Export declare const enum PriceScaleMode {
//   Normal = 0,
//   Log = 1,
//   Percentage = 2,
//   IndexedTo100 = 3,
// }
// Export declare const enum SeriesStyle {
//   Bars = 0,
//   Candles = 1,
//   Line = 2,
//   Area = 3,
//   HeikenAshi = 8,
//   HollowCandles = 9,
//   Baseline = 10,
//   HiLo = 12,
//   Renko = 4,
//   Kagi = 5,
//   PointAndFigure = 6,
//   LineBreak = 7,
// }
// Export declare const enum Side {
//   Buy = 1,
//   Sell = -1,
// }
// Export declare const enum StandardFormatterName {
//   Date = 'date',
//   DateOrDateTime = 'dateOrDateTime',
//   Default = 'default',
//   Fixed = 'fixed',
//   VariablePrecision = 'variablePrecision',
//   FormatQuantity = 'formatQuantity',
//   FormatPrice = 'formatPrice',
//   FormatPriceForexSup = 'formatPriceForexSup',
//   IntegerSeparated = 'integerSeparated',
//   LocalDate = 'localDate',
//   LocalDateOrDateTime = 'localDateOrDateTime',
//   OrderSettings = 'orderSettings',
//   Percentage = 'percentage',
//   Pips = 'pips',
//   Profit = 'profit',
//   ProfitInInstrumentCurrency = 'profitInInstrumentCurrency',
//   PosSettings = 'posSettings',
//   Side = 'side',
//   PositionSide = 'positionSide',
//   Status = 'status',
//   Symbol = 'symbol',
//   Text = 'text',
//   TextNoWrap = 'textNoWrap',
//   TradeSettings = 'tradeSettings',
//   Type = 'type',
//   MarginPercent = 'marginPercent',
// }
// Export declare const enum TimeFrameType {
//   PeriodBack = 'period-back',
//   TimeRange = 'time-range',
// }
// Export declare const enum VisibilityType {
//   AlwaysOn = 'alwaysOn',
//   VisibleOnMouseOver = 'visibleOnMouseOver',
//   AlwaysOff = 'alwaysOff',
// }
// Export declare const widget: ChartingLibraryWidgetConstructor
// Export declare function version(): string
// Export declare type AccountId = Nominal<string, 'AccountID'>
// Export declare type ActionMetaInfo =
//   | ActionDescriptionWithCallback
//   | MenuSeparator
// Export declare type AvailableSaveloadVersions = '1.0' | '1.1'
// Export declare type CellAlignment = 'left' | 'right'
// Export declare type ChartActionId =
//   | 'chartProperties'
//   | 'compareOrAdd'
//   | 'scalesProperties'
//   | 'paneObjectTree'
//   | 'insertIndicator'
//   | 'symbolSearch'
//   | 'changeInterval'
//   | 'timeScaleReset'
//   | 'chartReset'
//   | 'seriesHide'
//   | 'studyHide'
//   | 'lineToggleLock'
//   | 'lineHide'
//   | 'scaleSeriesOnly'
//   | 'drawingToolbarAction'
//   | 'stayInDrawingModeAction'
//   | 'hideAllMarks'
//   | 'showCountdown'
//   | 'showSeriesLastValue'
//   | 'showSymbolLabelsAction'
//   | 'showStudyLastValue'
//   | 'showStudyPlotNamesAction'
//   | 'undo'
//   | 'redo'
//   | 'paneRemoveAllStudiesDrawingTools'
//   | 'showSymbolInfoDialog'
// Export declare type ContextMenuItemsProcessor = (
//   Items: readonly IActionVariant[],
//   ActionsFactory: ActionsFactory
// ) => Promise<readonly IActionVariant[]>
// Export declare type ContextMenuRendererFactory = (
//   Items: readonly IActionVariant[],
//   Params: CreateContextMenuParams,
//   OnDestroy: () => void
// ) => Promise<IContextMenuRenderer>
// Export declare type CustomTranslateFunction = (
//   Key: string,
//   Options?: TranslateOptions
// ) => string | null
// Export declare type DateFormat = keyof typeof dateFormatFunctions
// Export declare type Direction = 'buy' | 'sell'
// Export declare type DomeCallback = (data: DOMData) => void
// Export declare type DrawingEventType =
//   | 'click'
//   | 'move'
//   | 'remove'
//   | 'hide'
//   | 'show'
//   | 'create'
// Export declare type DropdownUpdateParams = Partial<
//   Omit<DropdownParams, 'align'>
// >
// Export declare type EditObjectDialogObjectType =
//   | 'mainSeries'
//   | 'drawing'
//   | 'study'
//   | 'other'
// Export declare type EmptyCallback = () => void
// Export declare type EntityId = Nominal<string, 'EntityId'>
// Export declare type ErrorCallback = (reason: string) => void
// Export declare type FieldDescriptor =
//   | TimeFieldDescriptor
//   | UserTimeFieldDescriptor
//   | SeriesFieldDescriptor
//   | StudyFieldDescriptor
// Export declare type GetMarksCallback<T> = (marks: T[]) => void
// Export declare type GetNewsFunction = (
//   Symbol: string,
//   Callback: (response: GetNewsResponse) => void
// ) => void
// Export declare type GroupLockState = 'Locked' | 'Unlocked' | 'Partial'
// Export declare type GroupVisibilityState = 'Visible' | 'Invisible' | 'Partial'
// Export declare type HeaderWidgetButtonsMode =
//   | 'fullsize'
//   | 'compact'
//   | 'adaptive'
// Export declare type HistoryCallback = (
//   Bars: Bar[],
//   Meta?: HistoryMetadata
// ) => void
// Export declare type IActionVariant = IAction | ISeparator
// Export declare type IBasicDataFeed = IDatafeedChartApi & IExternalDatafeed
// Export declare type INumberFormatter = IFormatter<number>
// Export declare type InputFieldValidator = (
//   Value: any
// ) => InputFieldValidatorResult
// Export declare type InputFieldValidatorResult =
//   | PositiveBaseInputFieldValidatorResult
//   | NegativeBaseInputFieldValidatorResult
// Export declare type LanguageCode =
//   | 'ar'
//   | 'zh'
//   | 'cs'
//   | 'da_DK'
//   | 'nl_NL'
//   | 'en'
//   | 'et_EE'
//   | 'fr'
//   | 'de'
//   | 'el'
//   | 'he_IL'
//   | 'hu_HU'
//   | 'id_ID'
//   | 'it'
//   | 'ja'
//   | 'ko'
//   | 'fa'
//   | 'pl'
//   | 'pt'
//   | 'ro'
//   | 'ru'
//   | 'sk_SK'
//   | 'es'
//   | 'sv'
//   | 'th'
//   | 'tr'
//   | 'vi'
//   | 'no'
//   | 'ms_MY'
//   | 'zh_TW'
// Export declare type LayoutType =
//   | SingleChartLayoutType
//   | MultipleChartsLayoutType
// Export declare type LegendMode = 'horizontal' | 'vertical'
// Export declare type MarkConstColors = 'red' | 'green' | 'blue' | 'yellow'
// Export declare type MultipleChartsLayoutType =
//   | '2h'
//   | '2v'
//   | '2-1'
//   | '3s'
//   | '3h'
//   | '3v'
//   | '4'
//   | '6'
//   | '8'
//   | '1-2'
//   | '3r'
//   | '4h'
//   | '4v'
//   | '4s'
//   | '1-3'
//   | '2-2'
//   | '1-4'
//   | '5s'
//   | '6c'
//   | '8c'
// /**
//  * This is the generic type useful for declaring a nominal type,
//  * Which does not structurally matches with the base type and
//  * The other types declared over the same base type
//  *
//  * Usage:
//  * @example
//  * Type Index = Nominal<number, 'Index'>;
//  * // let i: Index = 42; // this fails to compile
//  * Let i: Index = 42 as Index; // OK
//  * @example
//  * Type TagName = Nominal<string, 'TagName'>;
//  */
export declare type Nominal<T, Name extends string> = T & {
  [Symbol.species]: Name
}
// Export declare type OnActionExecuteHandler = (action: IAction) => void
// Export declare type OnActionUpdateHandler = (action: IAction) => void
// Export declare type OnReadyCallback = (
//   Configuration: DatafeedConfiguration
// ) => void
// Export declare type Order = PlacedOrder | BracketOrder
// Export declare type PageName =
//   | 'watchlist_details_news'
//   | 'data_window'
//   | 'object_tree'
// Export declare type PineJS = any
// Export declare type QuoteData = QuoteOkData | QuoteErrorData
// Export declare type QuotesCallback = (data: QuoteData[]) => void
export declare type ResolutionString = Nominal<string, 'ResolutionString'>
// Export declare type ResolveCallback = (symbolInfo: LibrarySymbolInfo) => void
// Export declare type RssNewsFeedItem = RssNewsFeedInfo | RssNewsFeedInfo[]
// Export declare type SearchSymbolsCallback = (
//   Items: SearchSymbolResultItem[]
// ) => void
// Export declare type SeriesEventType = 'price_scale_changed'
// Export declare type SeriesFormat = 'price' | 'volume'
// Export declare type SeriesPriceScale =
//   | 'new-left'
//   | 'new-right'
//   | 'no-scale'
//   | EntityId
// Export declare type ServerTimeCallback = (serverTime: number) => void
// Export declare type SetVisibleTimeRange = Omit<VisibleTimeRange, 'to'> &
//   Partial<Pick<VisibleTimeRange, 'to'>>
// Export declare type ShapePoint = StickedPoint | PricedPoint | TimePoint
// Export declare type ShapesGroupId = Nominal<string, 'ShapesGroupId'>
// Export declare type SingleChartLayoutType = 's'
// Export declare type StudyEventType = 'remove' | 'price_scale_changed'
// Export declare type StudyInputId = Nominal<string, 'StudyInputId'>
// Export declare type StudyInputValue = string | number | boolean
// Export declare type StudyOverrideValueType = string | number | boolean
// Export declare type StudyPriceScale =
//   | 'new-left'
//   | 'new-right'
//   | 'no-scale'
//   | 'as-series'
// Export declare type SubscribeBarsCallback = (bar: Bar) => void
// Export declare type SupportedLineTools =
//   | 'text'
//   | 'anchored_text'
//   | 'note'
//   | 'anchored_note'
//   | 'signpost'
//   | 'double_curve'
//   | 'arc'
//   | 'icon'
//   | 'arrow_up'
//   | 'arrow_down'
//   | 'arrow_left'
//   | 'arrow_right'
//   | 'price_label'
//   | 'price_note'
//   | 'arrow_marker'
//   | 'flag'
//   | 'vertical_line'
//   | 'horizontal_line'
//   | 'cross_line'
//   | 'horizontal_ray'
//   | 'trend_line'
//   | 'info_line'
//   | 'trend_angle'
//   | 'arrow'
//   | 'ray'
//   | 'extended'
//   | 'parallel_channel'
//   | 'disjoint_angle'
//   | 'flat_bottom'
//   | 'pitchfork'
//   | 'schiff_pitchfork_modified'
//   | 'schiff_pitchfork'
//   | 'balloon'
//   | 'inside_pitchfork'
//   | 'pitchfan'
//   | 'gannbox'
//   | 'gannbox_square'
//   | 'gannbox_fixed'
//   | 'gannbox_fan'
//   | 'fib_retracement'
//   | 'fib_trend_ext'
//   | 'fib_speed_resist_fan'
//   | 'fib_timezone'
//   | 'fib_trend_time'
//   | 'fib_circles'
//   | 'fib_spiral'
//   | 'fib_speed_resist_arcs'
//   | 'fib_channel'
//   | 'xabcd_pattern'
//   | 'cypher_pattern'
//   | 'abcd_pattern'
//   | 'callout'
//   | 'triangle_pattern'
//   | '3divers_pattern'
//   | 'head_and_shoulders'
//   | 'fib_wedge'
//   | 'elliott_impulse_wave'
//   | 'elliott_triangle_wave'
//   | 'elliott_triple_combo'
//   | 'elliott_correction'
//   | 'elliott_double_combo'
//   | 'cyclic_lines'
//   | 'time_cycles'
//   | 'sine_line'
//   | 'long_position'
//   | 'short_position'
//   | 'forecast'
//   | 'date_range'
//   | 'price_range'
//   | 'date_and_price_range'
//   | 'bars_pattern'
//   | 'ghost_feed'
//   | 'projection'
//   | 'rectangle'
//   | 'rotated_rectangle'
//   | 'circle'
//   | 'ellipse'
//   | 'triangle'
//   | 'polyline'
//   | 'path'
//   | 'curve'
//   | 'cursor'
//   | 'dot'
//   | 'arrow_cursor'
//   | 'eraser'
//   | 'measure'
//   | 'zoom'
//   | 'brush'
//   | 'highlighter'
//   | 'regression_trend'
//   | 'fixed_range_volume_profile'
// Export declare type SymbolSearchCompleteOverrideFunction = (
//   Symbol: string
// ) => Promise<string>
// Export declare type SymbolType =
//   | 'stock'
//   | 'index'
//   | 'forex'
//   | 'futures'
//   | 'bitcoin'
//   | 'crypto'
//   | 'undefined'
//   | 'expression'
//   | 'spread'
//   | 'cfd'
//   | 'economic'
//   | 'equity'
//   | 'dr'
//   | 'bond'
//   | 'right'
//   | 'warrant'
//   | 'fund'
//   | 'structured'
// Export declare type TextInputFieldValidator = (
//   Value: string
// ) => InputFieldValidatorResult
// Export declare type ThemeName = 'Light' | 'Dark'
// Export declare type TickMarkType =
//   /**
//    * The start of the year (e.g. it's the first tick mark in a year).
//    */
//   | 'Year'
//   /**
//    * The start of the month (e.g. it's the first tick mark in a month).
//    */
//   | 'Month'
//   /**
//    * A day of the month.
//    */
//   | 'DayOfMonth'
//   /**
//    * A time without seconds.
//    */
//   | 'Time'
//   /**
//    * A time with seconds.
//    */
//   | 'TimeWithSeconds'
// Export declare type TimeFrameValue = TimeFramePeriodBack | TimeFrameTimeRange
// Export declare type Timezone = 'Etc/UTC' | CustomTimezones
// Export declare type TimezoneId = CustomTimezones | 'Etc/UTC' | 'exchange'
// Export declare type TradableSolutions =
//   | ChangeAccountSolution
//   | ChangeSymbolSolution
// Export declare type TradingDialogCustomField =
//   | CheckboxFieldMetaInfo
//   | TextWithCheckboxFieldMetaInfo
//   | CustomComboBoxMetaInfo
// Export declare type VisiblePlotsSet = 'ohlcv' | 'ohlc' | 'c'
// Export declare type WatchListSymbolListAddedCallback = (
//   ListId: string,
//   Symbols: string[]
// ) => void
// Export declare type WatchListSymbolListChangedCallback = (
//   ListId: string
// ) => void
// Export declare type WatchListSymbolListRemovedCallback = (
//   ListId: string
// ) => void
// Export declare type WatchListSymbolListRenamedCallback = (
//   ListId: string,
//   OldName: string,
//   NewName: string
// ) => void
// Export declare type WatchedValueCallback<T> = (value: T) => void
// Export interface AccessList {
//   Type: 'black' | 'white'
//   Tools: AccessListItem[]
// }
// Export interface AccessListItem {
//   Name: string
//   Grayed?: boolean
// }
// Export interface AccountManagerColumn {
//   Label: string
//   Alignment?: CellAlignment
//   Formatter?: StandardFormatterName | 'orderSettings' | 'posSettings' | string
//   Property: string
//   SortProp?: string
//   NotSortable?: boolean
//   Help?: string
//   HighlightDiff?: boolean
//   NotHideable?: boolean
//   HideByDefault?: boolean
//   TooltipProperty?: string
//   IsCapitalize?: boolean
//   ShowZeroValues?: boolean
// }
// Export interface AccountManagerInfo {
//   AccountTitle: string
//   Summary: AccountManagerSummaryField[]
//   OrderColumns: OrderTableColumn[]
//   OrderColumnsSorting?: SortingParameters
//   HistoryColumns?: AccountManagerColumn[]
//   HistoryColumnsSorting?: SortingParameters
//   PositionColumns?: AccountManagerColumn[]
//   TradeColumns?: AccountManagerColumn[]
//   Pages: AccountManagerPage[]
//   PossibleOrderStatuses?: OrderStatus[]
//   MarginUsed?: IWatchedValue<number>
//   ContextMenuActions?(
//     ContextMenuEvent: MouseEvent | TouchEvent,
//     ActivePageActions: ActionMetaInfo[]
//   ): Promise<ActionMetaInfo[]>
// }
// Export interface AccountManagerPage {
//   Id: string
//   Title: string
//   Tables: AccountManagerTable[]
// }
// Export interface AccountManagerSummaryField {
//   Text: string
//   WValue: IWatchedValueReadonly<any>
//   Formatter?: string
// }
// Export interface AccountManagerTable {
//   Id: string
//   Title?: string
//   Columns: AccountManagerColumn[]
//   InitialSorting?: SortingParameters
//   ChangeDelegate: ISubscription<(data: {}) => void>
//   Flags?: AccountManagerTableFlags
//   GetData(paginationLastId?: string | number): Promise<{}[]>
// }
// Export interface AccountManagerTableFlags {
//   SupportPagination?: boolean
// }
// Export interface ActionDescription {
//   Text?: '-' | string
//   Separator?: boolean
//   Shortcut?: string
//   Tooltip?: string
//   Checked?: boolean
//   CheckedStateSource?: () => boolean
//   Checkable?: boolean
//   Enabled?: boolean
//   ExternalLink?: boolean
//   Icon?: string
// }
// Export interface ActionDescriptionWithCallback extends ActionDescription {
//   Action: (a?: ActionDescription) => void
// }
// Export interface ActionOptions
//   Extends Partial<Omit<ActionState, 'actionId'>>,
//     Pick<ActionState, 'actionId'> {
//   /**
//    * A function which will be called when an action should be executed (e.g. when a user clicks on the item).
//    */
//   OnExecute?: OnActionExecuteHandler
// }
// Export interface ActionState {
//   /**
//    * Human-readable, non-unique ID of an action item. Similar to {@link label}, but language-agnostic.
//    */
//   ActionId: ActionId
//   Active: boolean
//   /**
//    * Text title of an action
//    */
//   Label: string
//   /**
//    * Whether an action is disabled or not (disabled actions are usually cannot be executed and displayed grayed out)
//    */
//   Disabled: boolean
//   /**
//    * Sub-items of an action
//    */
//   SubItems: IActionVariant[]
//   /**
//    * Whether an action should have a checkbox next to it.
//    */
//   Checkable: boolean
//   /**
//    * If {@link checkable} is `true` then whether current state is checked or not.
//    */
//   Checked: boolean
//   /**
//    * A hint of an action.
//    */
//   Hint?: string
//   /**
//    * A string of SVG icon for an action. A string should be a string representation of SVG (not a path/URL).
//    */
//   Icon?: string
//   /**
//    * If {@link checkable} is `true` then an icon to be used when {@link checked} is `true`.
//    */
//   IconChecked?: string
//   /**
//    * Whether an action is still in loading state (it means that it's data is not ready yet).
//    * Usually in this case a spinner/loader will be displayed instead of this action.
//    */
//   Loading: boolean
//   /**
//    * A string that represents a shortcut hint for this action.
//    */
//   ShortcutHint?: string
// }
// Export interface ActionsFactory {
//   /**
//    * Creates an action with provided options.
//    */
//   CreateAction: (options: ActionOptions) => IUpdatableAction
//   /**
//    * Creates an action that will wait for a promise to get its options.
//    * In terms of GUI until a promise is resolved the loader/spinner will be displayed.
//    */
//   CreateAsyncAction: (loader: () => Promise<ActionOptions>) => IUpdatableAction
//   /**
//    * Creates a separator item.
//    */
//   CreateSeparator: () => ISeparator
// }
// Export interface AdditionalSymbolInfoField {
//   Title: string
//   PropertyName: string
// }
// Export interface AreaStylePreferences {
//   Color1: string
//   Color2: string
//   Linecolor: string
//   Linestyle: number
//   Linewidth: number
//   Transparency: number
// }
// Export interface AvailableZOrderOperations {
//   BringForwardEnabled: boolean
//   BringToFrontEnabled: boolean
//   SendBackwardEnabled: boolean
//   SendToBackEnabled: boolean
// }
// Export interface Bar {
//   Time: number
//   Open: number
//   High: number
//   Low: number
//   Close: number
//   Volume?: number
// }
// Export interface BarStylePreferences {
//   UpColor: string
//   DownColor: string
//   BarColorsOnPrevClose: boolean
//   DontDrawOpen: boolean
//   ThinBars: boolean
// }
// Export interface BaseInputFieldValidatorResult {
//   Valid: boolean
// }
// Export interface BaselineStylePreferences {
//   TopFillColor1: string
//   TopFillColor2: string
//   BottomFillColor1: string
//   BottomFillColor2: string
//   TopLineColor: string
//   BottomLineColor: string
//   BaselineColor: string
//   TopLineWidth: number
//   BottomLineWidth: number
//   Transparency: number
//   BaseLevelPercentage: number
// }
// Export interface BracketOrder extends PlacedOrder {
//   ParentId: string
//   ParentType: ParentType
// }
// Export interface Brackets {
//   StopLoss?: number
//   TakeProfit?: number
//   TrailingStopPips?: number
// }
// Export interface BrokerConfigFlags {
//   SupportDisplayBrokerNameInSymbolSearch?: boolean
//   ShowQuantityInsteadOfAmount?: boolean
//   SupportOrderBrackets?: boolean
//   SupportTrailingStop?: boolean
//   SupportPositions?: boolean
//   SupportPositionBrackets?: boolean
//   SupportTradeBrackets?: boolean
//   SupportTrades?: boolean
//   SupportClosePosition?: boolean
//   SupportCloseTrade?: boolean
//   SupportModifyOrderPrice?: boolean
//   SupportEditAmount?: boolean
//   SupportModifyBrackets?: boolean
//   SupportLevel2Data?: boolean
//   SupportDOM?: boolean
//   SupportMultiposition?: boolean
//   SupportPLUpdate?: boolean
//   SupportReversePosition?: boolean
//   SupportNativeReversePosition?: boolean
//   SupportMarketOrders?: boolean
//   SupportLimitOrders?: boolean
//   SupportStopOrders?: boolean
//   SupportStopLimitOrders?: boolean
//   SupportDemoLiveSwitcher?: boolean
//   SupportMarketBrackets?: boolean
//   SupportSymbolSearch?: boolean
//   SupportModifyDuration?: boolean
//   SupportModifyTrailingStop?: boolean
//   SupportMargin?: boolean
//   CalculatePLUsingLast?: boolean
//   SupportPlaceOrderPreview?: boolean
//   SupportModifyOrderPreview?: boolean
//   SupportLeverage?: boolean
//   SupportOrdersHistory?: boolean
//   SupportAddBracketsToExistingOrder?: boolean
//   SupportBalances?: boolean
//   ClosePositionCancelsOrders?: boolean
//   SupportOnlyPairPositionBrackets?: boolean
//   SupportCryptoExchangeOrderTicket?: boolean
//   SupportConfirmations?: boolean
//   /** Does broker need to display position's PL in instrument's currency */
//   PositionPLInInstrumentCurrency?: boolean
//   /** Does broker support partial position closing */
//   SupportPartialClosePosition?: boolean
//   /** Does broker support partial trade closing */
//   SupportPartialCloseTrade?: boolean
//   /** Cancelling a bracket cancels it's oco pair */
//   SupportCancellingBothBracketsOnly?: boolean
//   /** Does broker support crypto brackets */
//   SupportCryptoBrackets?: boolean
//   /** Does broker need to show notifications log */
//   ShowNotificationsLog?: boolean
//   /**
//    * Whether stop orders should behave like Market-if-touched in both directions.
//    * Enabling this flag removes the direction check from the order dialog.
//    */
//   SupportStopOrdersInBothDirections?: boolean
//   /** Does broker support executions */
//   SupportExecutions?: boolean
//   RequiresFIFOCloseTrades?: boolean
//   /**
//    * @deprecated
//    */
//   SupportBrackets?: boolean
//   /**
//    * Use supportModifyOrderPrice, supportEditAmount and supportModifyBrackets instead.
//    * @deprecated
//    */
//   SupportModifyOrder?: boolean
// }
// Export interface BrokerCustomUI {
//   ShowOrderDialog?: (
//     Order: OrderTemplate | Order,
//     Focus?: OrderTicketFocusControl
//   ) => Promise<boolean>
//   ShowPositionDialog?: (
//     Position: Position | Trade,
//     Brackets: Brackets,
//     Focus?: OrderTicketFocusControl
//   ) => Promise<boolean>
//   ShowCancelOrderDialog?: (order: Order) => Promise<boolean>
//   ShowClosePositionDialog?: (position: Position) => Promise<boolean>
// }
// Export interface CandleStylePreferences {
//   UpColor: string
//   DownColor: string
//   DrawWick: boolean
//   DrawBorder: boolean
//   DrawBody: boolean
//   BorderColor: string
//   BorderUpColor: string
//   BorderDownColor: string
//   WickColor: string
//   WickUpColor: string
//   WickDownColor: string
//   BarColorsOnPrevClose: boolean
// }
// Export interface ChangeAccountSolution {
//   ChangeAccount: AccountId
// }
// Export interface ChangeSymbolSolution {
//   ChangeSymbol: string
// }
// Export interface ChangeThemeOptions {
//   DisableUndo: boolean
// }
export interface ChartData {
  id: string
  name: string
  symbol: string
  resolution: ResolutionString
  content: string
}
// Export interface ChartMetaInfo {
//   Id: number
//   Name: string
//   Symbol: string
//   Resolution: ResolutionString
//   Timestamp: number
// }
// Export interface ChartingLibraryWidgetConstructor {
//   New (
//     Options: ChartingLibraryWidgetOptions | TradingTerminalWidgetOptions
//   ): IChartingLibraryWidget
// }
// Export interface ChartingLibraryWidgetOptions {
//   /** @deprecated */
//   Container_id?: string
//   Container: HTMLElement | string
//   Datafeed: IBasicDataFeed | (IBasicDataFeed & IDatafeedQuotesApi)
//   Interval: ResolutionString
//   Symbol?: string
//   Auto_save_delay?: number
//   Autosize?: boolean
//   Debug?: boolean
//   Disabled_features?: string[]
//   Drawings_access?: AccessList
//   Enabled_features?: string[]
//   Fullscreen?: boolean
//   Height?: number
//   Library_path?: string
//   Locale: LanguageCode
//   Numeric_formatting?: NumericFormattingParams
//   Saved_data?: object
//   Saved_data_meta_info?: SavedStateMetaInfo
//   Studies_access?: AccessList
//   Study_count_limit?: number
//   Symbol_search_request_delay?: number
//   Timeframe?: string
//   Timezone?: 'exchange' | Timezone
//   Toolbar_bg?: string
//   Width?: number
//   Charts_storage_url?: string
//   Charts_storage_api_version?: AvailableSaveloadVersions
//   Client_id?: string
//   User_id?: string
//   Load_last_chart?: boolean
//   Studies_overrides?: StudyOverrides
//   CustomFormatters?: CustomFormatters
//   Custom_formatters?: CustomFormatters
//   Overrides?: Overrides
//   Snapshot_url?: string
//   Preset?: 'mobile'
//   Time_frames?: TimeFrameItem[]
//   Custom_css_url?: string
//   Custom_font_family?: string
//   Favorites?: Favorites
//   Save_load_adapter?: IExternalSaveLoadAdapter
//   Loading_screen?: LoadingScreenOptions
//   Settings_adapter?: ISettingsAdapter
//   Theme?: ThemeName
//   Compare_symbols?: CompareSymbol[]
//   Custom_indicators_getter?: (
//     PineJS: PineJS
//   ) => Promise<readonly CustomIndicator[]>
//   Additional_symbol_info_fields?: AdditionalSymbolInfoField[]
//   Header_widget_buttons_mode?: HeaderWidgetButtonsMode
//   Context_menu?: ContextMenuOptions
//   Time_scale?: TimeScaleOptions
//   Custom_translate_function?: CustomTranslateFunction
//   Symbol_search_complete?: SymbolSearchCompleteOverrideFunction
//   Settings_overrides?: Overrides
// }
// Export interface CheckboxFieldMetaInfo extends CustomFieldMetaInfoBase {
//   InputType: 'Checkbox'
//   Value: boolean
//   SupportModify?: boolean
//   Help?: string
// }
// Export interface ClientSnapshotOptions {
//   BackgroundColor: string
//   BorderColor: string
//   Font: string
//   FontSize: number
//   LegendMode: LegendMode
//   HideResolution: boolean
// }
// Export interface CompareSymbol {
//   Symbol: string
//   Title: string
// }
// Export interface ContextMenuItem {
//   Position: 'top' | 'bottom'
//   Text: string
//   Click: EmptyCallback
// }
// Export interface ContextMenuOptions {
//   Items_processor?: ContextMenuItemsProcessor
//   /**
//    * This API is experimental and might be changed significantly in the future releases.
//    */
//   Renderer_factory?: ContextMenuRendererFactory
// }
// Export interface ContextMenuPosition {
//   ClientX: number
//   ClientY: number
//   Touches?: readonly {
//     ClientX: number
//     ClientY: number
//   }[]
//   /**
//    * Tells what side of the context menu widget should be used to "attach" to a provided x coordinate.
//    * If the value is `undefined`, then you may treat it based on whether it is rtl or not (e.g. `'right'` for rtl and `'left'` otherwise).
//    */
//   AttachToXBy?: 'left' | 'right'
//   /**
//    * Tells what side of the context menu widget should be used to "attach" to a provided y coordinate:
//    * - `'auto'` means similar to `'top'` but the menu could be expanded above the coordinate if needed (if there is no enough space to place it below)
//    * - `'auto-strict'` means `'top'` if the whole menu fits the space below the coordinate and `'bottom'` otherwise (see {@link boxHeight})
//    * - `'top'` means that the menu should be placed to the bottom of y coordinate (the menu should be attached by its bottom to y coordinate)
//    * - `'bottom'` means that the menu should be placed above y coordinate (the menu should be attached by its top to y coordinate)
//    *
//    * You may treat `undefined` as `'auto'`.
//    */
//   AttachToYBy?: 'auto' | 'auto-strict' | 'top' | 'bottom'
//   /**
//    * The height of a box the context menu should avoid while calculating coordinates (see {@link attachToYBy}).
//    *
//    * You may treat `undefined` as `0`.
//    */
//   BoxHeight?: number
// }
// Export interface CreateButtonOptions {
//   Align: 'right' | 'left'
// }
// Export interface CreateContextMenuParams {
//   MenuName: string
//   Detail?:
//     | {
//         Type: 'series'
//         Id: string
//       }
//     | {
//         Type: 'study'
//         Id: string | null
//       }
//     | {
//         Type: 'shape'
//         Id: number | string | null
//       }
//     | {
//         Type: 'groupOfShapes'
//         Id: string | null
//       }
// }
// Export interface CreateMultipointShapeOptions<TOverrides extends object>
//   Extends CreateShapeOptionsBase<TOverrides> {
//   Shape?: Exclude<
//     SupportedLineTools,
//     'cursor' | 'dot' | 'arrow_cursor' | 'eraser' | 'measure' | 'zoom'
//   >
// }
// Export interface CreateShapeOptions<TOverrides extends object>
//   Extends CreateShapeOptionsBase<TOverrides> {
//   Shape?:
//     | 'arrow_up'
//     | 'arrow_down'
//     | 'flag'
//     | 'vertical_line'
//     | 'horizontal_line'
//     | 'long_position'
//     | 'short_position'
//     | 'icon'
//   OwnerStudyId?: EntityId
// }
// Export interface CreateShapeOptionsBase<TOverrides extends object> {
//   Text?: string
//   Lock?: boolean
//   DisableSelection?: boolean
//   DisableSave?: boolean
//   DisableUndo?: boolean
//   Overrides?: TOverrides
//   ZOrder?: 'top' | 'bottom'
//   ShowInObjectsTree?: boolean
//   OwnerStudyId?: EntityId
// }
// Export interface CreateStudyOptions {
//   CheckLimit?: boolean
//   PriceScale?: StudyPriceScale
//   AllowChangeCurrency?: boolean
//   AllowChangeUnit?: boolean
//   DisableUndo?: boolean
// }
// Export interface CreateStudyTemplateOptions {
//   SaveSymbol?: boolean
//   SaveInterval?: boolean
// }
// Export interface CrossHairMovedEventParams {
//   Time: number
//   Price: number
// }
// Export interface CryptoBalance {
//   Symbol: string
//   Total: number
//   Available: number
//   Reserved?: number
//   Value?: number
//   ValueCurrency?: string
//   LongName?: string
//   BtcValue?: number
// }
// Export interface CurrencyItem {
//   Id: string
//   Code: string
//   LogoUrl?: string
//   Description?: string
// }
// Export interface CustomComboBoxItem {
//   Text: string
//   Value: string
// }
// Export interface CustomComboBoxMetaInfo extends CustomInputFieldMetaInfo {
//   InputType: 'ComboBox'
//   Items: CustomComboBoxItem[]
// }
// Export interface CustomFieldMetaInfoBase {
//   InputType: string
//   Id: string
//   Title: string
//   Value?: any
//   SaveToSettings?: boolean
// }
// Export interface CustomFields {
//   [key: string]: any
// }
// Export interface CustomFormatter {
//   Format(date: Date): string
//   FormatLocal(date: Date): string
// }
// Export interface CustomFormatters {
//   TimeFormatter: CustomFormatter
//   DateFormatter: CustomFormatter
//   TickMarkFormatter?: (date: Date, tickMarkType: TickMarkType) => string
// }
// Export interface CustomIndicator {
//   Readonly name: string
//   Readonly metainfo: any
//   Readonly constructor: any
// }
// Export interface CustomInputFieldMetaInfo extends CustomFieldMetaInfoBase {
//   PreventModify?: boolean
//   PlaceHolder?: string
//   Validator?: InputFieldValidator
//   CustomInfo?: any
// }
// Export interface CustomInputFieldsValues {
//   [fieldId: string]: TextWithCheckboxValue | boolean | string | any
// }
// Export interface DOMData {
//   Snapshot: boolean
//   Asks: DOMLevel[]
//   Bids: DOMLevel[]
// }
// Export interface DOMLevel {
//   Price: number
//   Volume: number
// }
// Export interface DatafeedConfiguration {
//   Exchanges?: Exchange[]
//   Supported_resolutions?: ResolutionString[]
//   Units?: Record<string, Unit[]>
//   Currency_codes?: (string | CurrencyItem)[]
//   Supports_marks?: boolean
//   Supports_time?: boolean
//   Supports_timescale_marks?: boolean
//   Symbols_types?: DatafeedSymbolType[]
// }
// Export interface DatafeedQuoteValues {
//   Ch?: number
//   Chp?: number
//   Short_name?: string
//   Exchange?: string
//   Description?: string
//   Lp?: number
//   Ask?: number
//   Bid?: number
//   Spread?: number
//   Open_price?: number
//   High_price?: number
//   Low_price?: number
//   Prev_close_price?: number
//   Volume?: number
//   Original_name?: string
//   [valueName: string]: string | number | undefined
// }
// Export interface DatafeedSymbolType {
//   Name: string
//   Value: string
// }
// Export interface DefaultContextMenuActionsParams {}
// Export interface DefaultDropdownActionsParams {
//   TradingProperties?: boolean
//   ShowHowToUse?: boolean
//   RestoreConfirmations?: boolean
// }
// Export interface DialogParams<CallbackType> {
//   Title: string
//   Body: string
//   Callback: CallbackType
// }
// Export interface DropdownItem {
//   Title: string
//   OnSelect: () => void
// }
// Export interface DropdownParams {
//   Title: string
//   Items: DropdownItem[]
//   Tooltip?: string
//   Icon?: string
//   Align?: 'right' | 'left'
// }
// Export interface EditObjectDialogEventParams {
//   ObjectType: EditObjectDialogObjectType
//   ScriptTitle: string
// }
// Export interface EntityInfo {
//   Id: EntityId
//   Name: string
// }
// Export interface ErrorFormatterParseResult extends FormatterParseResult {
//   Error?: string
//   Res: false
// }
// Export interface Exchange {
//   Value: string
//   Name: string
//   Desc: string
// }
// Export interface Execution extends CustomFields {
//   Symbol: string
//   Price: number
//   Qty: number
//   Side: Side
//   Time: number
// }
// Export interface ExportDataOptions {
//   From?: number
//   To?: number
//   IncludeTime?: boolean
//   IncludeUserTime?: boolean
//   IncludeSeries?: boolean
//   IncludeDisplayedValues?: boolean
//   IncludedStudies: readonly string[] | 'all'
// }
// Export interface ExportedData {
//   Schema: FieldDescriptor[]
//   Data: Float64Array[]
//   DisplayedData: string[][]
// }
// Export interface Favorites {
//   Intervals: ResolutionString[]
//   ChartTypes: string[]
// }
// Export interface FormatterParseResult {
//   Res: boolean
// }
// Export interface GetNewsResponse {
//   Title?: string
//   NewsItems: NewsItem[]
// }
// Export interface GrayedObject {
//   Type: 'drawing' | 'study'
//   Name: string
// }
// Export interface HeikinAshiStylePreferences {
//   UpColor: string
//   DownColor: string
//   DrawWick: boolean
//   DrawBorder: boolean
//   DrawBody: boolean
//   BorderColor: string
//   BorderUpColor: string
//   BorderDownColor: string
//   WickColor: string
//   WickUpColor: string
//   WickDownColor: string
//   ShowRealLastPrice: boolean
//   BarColorsOnPrevClose: boolean
// }
// Export interface HiLoStylePreferences {
//   Color: string
//   ShowBorders: boolean
//   BorderColor: string
//   ShowLabels: boolean
//   LabelColor: string
//   FontSize: number
//   DrawBody: boolean
// }
// Export interface HistoryMetadata {
//   NoData?: boolean
//   NextTime?: number | null
// }
// Export interface HollowCandleStylePreferences {
//   UpColor: string
//   DownColor: string
//   DrawWick: boolean
//   DrawBorder: boolean
//   DrawBody: boolean
//   BorderColor: string
//   BorderUpColor: string
//   BorderDownColor: string
//   WickColor: string
//   WickUpColor: string
//   WickDownColor: string
// }
// Export interface IAction extends IMenuItem {
//   Readonly type: MenuItemType.Action
//   /**
//    * A method which will be called when an action should be executed (e.g. when a user clicks on the item)
//    */
//   Execute(): void
//   /**
//    * @returns Returns a state object of the action.
//    */
//   GetState(): Readonly<ActionState>
//   /**
//    * @returns A subscription for an event when an action is updated.
//    */
//   OnUpdate(): ISubscription<OnActionUpdateHandler>
// }
// Export interface IBoxedValue<T> extends IBoxedValueReadOnly<T> {
//   SetValue(value: T): void
// }
// Export interface IBoxedValueReadOnly<T> {
//   Value(): T
// }
// Export interface IBrokerCommon {
//   ChartContextMenuActions(
//     Context: TradeContext,
//     Options?: DefaultContextMenuActionsParams
//   ): Promise<ActionMetaInfo[]>
//   IsTradable(symbol: string): Promise<boolean | IsTradableResult>
//   ConnectionStatus(): ConnectionStatus
//   Orders(): Promise<Order[]>
//   OrdersHistory?(): Promise<Order[]>
//   Positions?(): Promise<Position[]>
//   Trades?(): Promise<Trade[]>
//   Executions(symbol: string): Promise<Execution[]>
//   SymbolInfo(symbol: string): Promise<InstrumentInfo>
//   AccountManagerInfo(): AccountManagerInfo
//   Formatter?(symbol: string, alignToMinMove: boolean): Promise<INumberFormatter>
//   SpreadFormatter?(symbol: string): Promise<INumberFormatter>
//   QuantityFormatter?(symbol: string): Promise<INumberFormatter>
//   GetOrderDialogOptions?(
//     Symbol: string
//   ): Promise<OrderDialogOptions | undefined>
//   GetPositionDialogOptions?(): PositionDialogOptions | undefined
// }
// Export interface IBrokerConnectionAdapterFactory {
//   CreateDelegate<T extends Function>(): IDelegate<T>
//   CreateWatchedValue<T>(value?: T): IWatchedValue<T>
//   CreatePriceFormatter(
//     PriceScale?: number,
//     MinMove?: number,
//     Fractional?: boolean,
//     MinMove2?: number
//   ): IPriceFormatter
// }
// Export interface IBrokerConnectionAdapterHost {
//   Factory: IBrokerConnectionAdapterFactory
//   DefaultFormatter(
//     Symbol: string,
//     AlignToMinMove: boolean
//   ): Promise<INumberFormatter>
//   NumericFormatter(decimalPlaces: number): Promise<INumberFormatter>
//   QuantityFormatter(decimalPlaces?: number): Promise<INumberFormatter>
//   DefaultContextMenuActions(
//     Context: TradeContext,
//     Params?: DefaultContextMenuActionsParams
//   ): Promise<ActionMetaInfo[]>
//   DefaultDropdownMenuActions(
//     Options?: Partial<DefaultDropdownActionsParams>
//   ): ActionMetaInfo[]
//   SellBuyButtonsVisibility(): IWatchedValue<boolean> | null
//   DomPanelVisibility(): IWatchedValue<boolean> | null
//   OrderPanelVisibility(): IWatchedValue<boolean> | null
//   SilentOrdersPlacement(): IWatchedValue<boolean>
//   PatchConfig(config: Partial<BrokerConfigFlags>): void
//   SetDurations(durations: OrderDurationMetaInfo[]): void
//   OrderUpdate(order: Order): void
//   OrderPartialUpdate(id: string, orderChanges: Partial<Order>): void
//   PositionUpdate(position: Position, isHistoryUpdate?: boolean): void
//   PositionPartialUpdate(id: string, positionChanges: Partial<Position>): void
//   TradeUpdate(trade: Trade, isHistoryUpdate?: boolean): void
//   TradePartialUpdate(id: string, tradeChanges: Partial<Trade>): void
//   ExecutionUpdate(execution: Execution): void
//   CurrentAccountUpdate(): void
//   RealtimeUpdate(symbol: string, data: TradingQuotes): void
//   PlUpdate(positionId: string, pl: number): void
//   PipValueUpdate(symbol: string, pipValues: PipValues): void
//   TradePLUpdate(tradeId: string, pl: number): void
//   EquityUpdate(equity: number): void
//   MarginAvailableUpdate(marginAvailable: number): void
//   CryptoBalanceUpdate(symbol: string, balance: CryptoBalance): void
//   DomeUpdate(symbol: string, equity: DOMData): void
//   ShowOrderDialog?<T extends PreOrder>(
//     Order: T,
//     Focus?: OrderTicketFocusControl
//   ): Promise<boolean>
//   ShowNotification(
//     Title: string,
//     Text: string,
//     NotificationType?: NotificationType
//   ): void
//   ShowCancelOrderDialog(
//     OrderId: string,
//     Handler: () => Promise<void>
//   ): Promise<void>
//   ShowCancelMultipleOrdersDialog(
//     Symbol: string,
//     Side: Side,
//     Qty: number,
//     Handler: () => Promise<void>
//   ): Promise<void>
//   ShowCancelBracketsDialog(
//     OrderId: string,
//     Handler: () => Promise<void>
//   ): Promise<void>
//   ShowCancelMultipleBracketsDialog(
//     OrderId: string,
//     Handler: () => Promise<void>
//   ): Promise<void>
//   ShowReversePositionDialog(
//     Position: string,
//     Handler: () => Promise<boolean>
//   ): Promise<boolean>
//   ShowPositionBracketsDialog(
//     Position: Position | Trade,
//     Brackets: Brackets,
//     Focus: OrderTicketFocusControl
//   ): Promise<boolean>
//   SetButtonDropdownActions(descriptions: ActionMetaInfo[]): void
//   ActivateBottomWidget(): Promise<void>
//   ShowTradingProperties(): void
//   GetSymbolMinTick(symbol: string): Promise<number>
//   ShowMessageDialog(title: string, text: string, textHasHTML: boolean): void
//   ShowConfirmDialog(
//     Title: string,
//     Content: string | string[],
//     MainButtonText?: string,
//     CancelButtonText?: string,
//     ShowDisableConfirmationsCheckbox?: boolean
//   ): Promise<boolean>
//   ShowSimpleConfirmDialog(
//     Title: string,
//     Content: string | string[],
//     MainButtonText?: string,
//     CancelButtonText?: string,
//     ShowDisableConfirmationsCheckbox?: boolean
//   ): Promise<boolean>
// }
// Export interface IBrokerTerminal extends IBrokerWithoutRealtime {
//   SubscribeRealtime(symbol: string): void
//   UnsubscribeRealtime(symbol: string): void
// }
// Export interface IBrokerWithoutRealtime extends IBrokerCommon {
//   SubscribeDOME?(symbol: string): void
//   UnsubscribeDOME?(symbol: string): void
//   PlaceOrder(order: PreOrder, confirmId?: string): Promise<PlaceOrderResult>
//   PreviewOrder?(order: PreOrder): Promise<OrderPreviewResult>
//   ModifyOrder(order: Order, confirmId?: string): Promise<void>
//   CancelOrder(orderId: string): Promise<void>
//   CancelOrders(
//     Symbol: string,
//     Side: Side | undefined,
//     OrdersIds: string[]
//   ): Promise<void>
//   ReversePosition?(positionId: string): Promise<void>
//   ClosePosition?(positionId: string, amount?: number): Promise<void>
//   CloseTrade?(tradeId: string, amount?: number): Promise<void>
//   EditPositionBrackets?(
//     PositionId: string,
//     Brackets: Brackets,
//     CustomFields?: CustomInputFieldsValues
//   ): Promise<void>
//   EditTradeBrackets?(tradeId: string, brackets: Brackets): Promise<void>
//   LeverageInfo?(leverageInfoParams: LeverageInfoParams): Promise<LeverageInfo>
//   SetLeverage?(leverageSetParams: LeverageSetParams): Promise<LeverageSetResult>
//   PreviewLeverage?(
//     LeverageSetParams: LeverageSetParams
//   ): Promise<LeveragePreviewResult>
//   /**
//    * @deprecated Brokers should always send PL and equity updates
//    */
//   SubscribePL?(positionId: string): void
//   SubscribeEquity?(): void
//   SubscribeMarginAvailable?(symbol: string): void
//   SubscribePipValue?(symbol: string): void
//   UnsubscribePipValue?(symbol: string): void
//   UnsubscribeMarginAvailable?(symbol: string): void
//   /**
//    * @deprecated
//    */
//   UnsubscribePL?(positionId: string): void
//   UnsubscribeEquity?(): void
// }
// Export interface IChartWidgetApi {
//   OnDataLoaded(): ISubscription<() => void>
//   OnSymbolChanged(): ISubscription<() => void>
//   OnIntervalChanged(): ISubscription<
//     (
//       Interval: ResolutionString,
//       TimeFrameParameters: {
//         Timeframe?: TimeFrameValue
//       }
//     ) => void
//   >
//   OnVisibleRangeChanged(): ISubscription<(range: VisibleTimeRange) => void>
//   OnChartTypeChanged(): ISubscription<(chartType: SeriesStyle) => void>
//   DataReady(callback: () => void): boolean
//   CrossHairMoved(): ISubscription<(params: CrossHairMovedEventParams) => void>
//   SetVisibleRange(
//     Range: SetVisibleTimeRange,
//     Options?: SetVisibleRangeOptions
//   ): Promise<void>
//   SetSymbol(symbol: string, callback?: () => void): void
//   SetResolution(resolution: ResolutionString, callback?: () => void): void
//   SetChartType(type: SeriesStyle, callback?: () => void): void
//   ResetData(): void
//   ExecuteActionById(actionId: ChartActionId): void
//   GetCheckableActionState(actionId: ChartActionId): boolean
//   RefreshMarks(): void
//   ClearMarks(): void
//   GetAllShapes(): EntityInfo[]
//   GetAllStudies(): EntityInfo[]
//   GetPriceToBarRatio(): number | null
//   SetPriceToBarRatio(ratio: number, options?: UndoOptions): void
//   IsPriceToBarRatioLocked(): boolean
//   SetPriceToBarRatioLocked(value: boolean, options?: UndoOptions): void
//   GetAllPanesHeight(): number[]
//   SetAllPanesHeight(heights: readonly number[]): void
//   AvailableZOrderOperations(
//     Sources: readonly EntityId[]
//   ): AvailableZOrderOperations
//   SendToBack(entities: readonly EntityId[]): void
//   BringToFront(sources: readonly EntityId[]): void
//   BringForward(sources: readonly EntityId[]): void
//   SendBackward(sources: readonly EntityId[]): void
//   /**
//    * @deprecated Use shape/study API instead.
//    * @see {@link getStudyById}
//    * @see {@link getShapeById}
//    */
//   SetEntityVisibility(entityId: EntityId, isVisible: boolean): void
//   CreateStudy<TOverrides extends StudyOverrides>(
//     Name: string,
//     ForceOverlay?: boolean,
//     Lock?: boolean,
//     Inputs?: Record<string, StudyInputValue>,
//     Overrides?: TOverrides,
//     Options?: CreateStudyOptions
//   ): Promise<EntityId | null>
//   /**
//    * @deprecated Prefer `createStudy` function that relies on named properties for `inputs`.
//    * @see {@link createStudy}
//    */
//   CreateStudy<
//     TStudyInputValue extends StudyInputValue,
//     TOverrides extends StudyOverrides
//   >(
//     Name: string,
//     ForceOverlay?: boolean,
//     Lock?: boolean,
//     Inputs?: TStudyInputValue[],
//     Overrides?: TOverrides,
//     Options?: CreateStudyOptions
//   ): Promise<EntityId | null>
//   GetStudyById(entityId: EntityId): IStudyApi
//   GetSeries(): ISeriesApi
//   CreateShape<TOverrides extends object>(
//     Point: ShapePoint,
//     Options: CreateShapeOptions<TOverrides>
//   ): EntityId | null
//   CreateMultipointShape<TOverrides extends object>(
//     Points: ShapePoint[],
//     Options: CreateMultipointShapeOptions<TOverrides>
//   ): EntityId | null
//   GetShapeById(entityId: EntityId): ILineDataSourceApi
//   RemoveEntity(entityId: EntityId, options?: UndoOptions): void
//   RemoveAllShapes(): void
//   RemoveAllStudies(): void
//   Selection(): ISelectionApi
//   ShowPropertiesDialog(studyId: EntityId): void
//   CreateStudyTemplate(options: CreateStudyTemplateOptions): object
//   ApplyStudyTemplate(template: object): void
//   CreateOrderLine(options?: UndoOptions): IOrderLineAdapter
//   CreatePositionLine(options?: UndoOptions): IPositionLineAdapter
//   CreateExecutionShape(options?: UndoOptions): IExecutionLineAdapter
//   Symbol(): string
//   SymbolExt(): SymbolExt
//   Resolution(): ResolutionString
//   GetVisibleRange(): VisibleTimeRange
//   /**
//    * @deprecated Use Price Scale API instead
//    */
//   GetVisiblePriceRange(): VisiblePriceRange
//   /**
//    * @deprecated Use rightOffset from TimeScale API instead
//    */
//   ScrollPosition(): number
//   /**
//    * @deprecated Use defaultRightOffset from TimeScale API instead
//    */
//   DefaultScrollPosition(): number
//   PriceFormatter(): INumberFormatter
//   ChartType(): SeriesStyle
//   /**
//    * @deprecated Use Timezone API instead
//    * @see {@link getTimezoneApi}
//    */
//   SetTimezone(timezone: 'exchange' | Timezone): void
//   /**
//    * @deprecated Use Timezone API instead
//    * @see {@link getTimezoneApi}
//    */
//   GetTimezone(): 'exchange' | Timezone
//   GetTimezoneApi(): ITimezoneApi
//   GetPanes(): IPaneApi[]
//   ExportData(options?: Partial<ExportDataOptions>): Promise<ExportedData>
//   CanZoomOut(): boolean
//   ZoomOut(): void
//   SetZoomEnabled(enabled: boolean): void
//   SetScrollEnabled(enabled: boolean): void
//   ShapesGroupController(): IShapesGroupControllerApi
//   BarTimeToEndOfPeriod(unixTime: number): number
//   EndOfPeriodToBarTime(unixTime: number): number
//   GetTimeScale(): ITimeScaleApi
//   IsSelectBarRequested(): boolean
//   RequestSelectBar(): Promise<number>
//   CancelSelectBar(): void
// }
// Export interface IChartingLibraryWidget {
//   HeaderReady(): Promise<void>
//   OnChartReady(callback: EmptyCallback): void
//   OnGrayedObjectClicked(callback: (obj: GrayedObject) => void): void
//   OnShortcut(
//     ShortCut: string | number | (string | number)[],
//     Callback: EmptyCallback
//   ): void
//   Subscribe<EventName extends keyof SubscribeEventsMap>(
//     Event: EventName,
//     Callback: SubscribeEventsMap[EventName]
//   ): void
//   Unsubscribe<EventName extends keyof SubscribeEventsMap>(
//     Event: EventName,
//     Callback: SubscribeEventsMap[EventName]
//   ): void
//   Chart(index?: number): IChartWidgetApi
//   GetLanguage(): LanguageCode
//   SetSymbol(
//     Symbol: string,
//     Interval: ResolutionString,
//     Callback: EmptyCallback
//   ): void
//   Remove(): void
//   ClosePopupsAndDialogs(): void
//   SelectLineTool(linetool: SupportedLineTools): void
//   SelectedLineTool(): SupportedLineTools
//   Save(callback: (state: object) => void): void
//   Load(state: object, extendedData?: SavedStateMetaInfo): void
//   GetSavedCharts(callback: (chartRecords: SaveLoadChartRecord[]) => void): void
//   LoadChartFromServer(chartRecord: SaveLoadChartRecord): void
//   SaveChartToServer(
//     OnComplete?: EmptyCallback,
//     OnFail?: EmptyCallback,
//     Options?: SaveChartToServerOptions
//   ): void
//   RemoveChartFromServer(
//     ChartId: string,
//     OnCompleteCallback: EmptyCallback
//   ): void
//   OnContextMenu(
//     Callback: (unixTime: number, price: number) => ContextMenuItem[]
//   ): void
//   CreateButton(options?: CreateButtonOptions): HTMLElement
//   CreateDropdown(params: DropdownParams): Promise<IDropdownApi>
//   ShowNoticeDialog(params: DialogParams<() => void>): void
//   ShowConfirmDialog(params: DialogParams<(confirmed: boolean) => void>): void
//   ShowLoadChartDialog(): void
//   ShowSaveAsChartDialog(): void
//   SymbolInterval(): SymbolIntervalResult
//   MainSeriesPriceFormatter(): INumberFormatter
//   GetIntervals(): string[]
//   GetStudiesList(): string[]
//   GetStudyInputs(studyName: string): StudyInputInfo[]
//   AddCustomCSSFile(url: string): void
//   ApplyOverrides<TOverrides extends StudyOverrides>(overrides: TOverrides): void
//   ApplyStudiesOverrides(overrides: object): void
//   WatchList(): Promise<IWatchListApi>
//   News(): Promise<INewsApi>
//   Widgetbar(): Promise<IWidgetbarApi>
//   ActiveChart(): IChartWidgetApi
//   ChartsCount(): number
//   Layout(): LayoutType
//   SetLayout(layout: LayoutType): void
//   LayoutName(): string
//   ChangeTheme(themeName: ThemeName, options?: ChangeThemeOptions): Promise<void>
//   GetTheme(): ThemeName
//   TakeScreenshot(): void
//   TakeClientScreenshot(
//     Options?: Partial<ClientSnapshotOptions>
//   ): Promise<HTMLCanvasElement>
//   LockAllDrawingTools(): IWatchedValue<boolean>
//   HideAllDrawingTools(): IWatchedValue<boolean>
//   MagnetEnabled(): IWatchedValue<boolean>
//   MagnetMode(): IWatchedValue<number>
//   SymbolSync(): IWatchedValue<boolean>
//   IntervalSync(): IWatchedValue<boolean>
//   CrosshairSync(): IWatchedValue<boolean>
//   TimeSync(): IWatchedValue<boolean>
//   StartFullscreen(): void
//   ExitFullscreen(): void
//   UndoRedoState(): UndoRedoState
//   NavigationButtonsVisibility(): IWatchedValue<VisibilityType>
//   PaneButtonsVisibility(): IWatchedValue<VisibilityType>
//   DateFormat(): IWatchedValue<DateFormat>
// }
// Export interface IContextMenuRenderer {
//   /**
//    * Displays the menu at the position {@link pos}.
//    */
//   Show(pos: ContextMenuPosition): void
//   /**
//    * Hides the menu.
//    */
//   Hide(): void
//   /**
//    * @returns Returns whether the menu is currently displayed.
//    */
//   IsShown(): boolean
// }
// Export interface IDatafeedChartApi {
//   GetMarks?(
//     SymbolInfo: LibrarySymbolInfo,
//     From: number,
//     To: number,
//     OnDataCallback: GetMarksCallback<Mark>,
//     Resolution: ResolutionString
//   ): void
//   GetTimescaleMarks?(
//     SymbolInfo: LibrarySymbolInfo,
//     From: number,
//     To: number,
//     OnDataCallback: GetMarksCallback<TimescaleMark>,
//     Resolution: ResolutionString
//   ): void
//   /**
//    * This function is called if configuration flag supports_time is set to true when chart needs to know the server time.
//    * The charting library expects callback to be called once.
//    * The time is provided without milliseconds. Example: 1445324591. It is used to display Countdown on the price scale.
//    */
//   GetServerTime?(callback: ServerTimeCallback): void
//   SearchSymbols(
//     UserInput: string,
//     Exchange: string,
//     SymbolType: string,
//     OnResult: SearchSymbolsCallback
//   ): void
//   ResolveSymbol(
//     SymbolName: string,
//     OnResolve: ResolveCallback,
//     OnError: ErrorCallback,
//     Extension?: SymbolResolveExtension
//   ): void
//   GetBars(
//     SymbolInfo: LibrarySymbolInfo,
//     Resolution: ResolutionString,
//     PeriodParams: PeriodParams,
//     OnResult: HistoryCallback,
//     OnError: ErrorCallback
//   ): void
//   SubscribeBars(
//     SymbolInfo: LibrarySymbolInfo,
//     Resolution: ResolutionString,
//     OnTick: SubscribeBarsCallback,
//     ListenerGuid: string,
//     OnResetCacheNeededCallback: () => void
//   ): void
//   UnsubscribeBars(listenerGuid: string): void
//   SubscribeDepth?(symbol: string, callback: DomeCallback): string
//   UnsubscribeDepth?(subscriberUID: string): void
//   GetVolumeProfileResolutionForPeriod?(
//     CurrentResolution: ResolutionString,
//     From: number,
//     To: number,
//     SymbolInfo: LibrarySymbolInfo
//   ): ResolutionString
// }
// Export interface IDatafeedQuotesApi {
//   GetQuotes(
//     Symbols: string[],
//     OnDataCallback: QuotesCallback,
//     OnErrorCallback: (msg: string) => void
//   ): void
//   SubscribeQuotes(
//     Symbols: string[],
//     FastSymbols: string[],
//     OnRealtimeCallback: QuotesCallback,
//     ListenerGUID: string
//   ): void
//   UnsubscribeQuotes(listenerGUID: string): void
// }
// Export interface IDelegate<TFunc extends Function>
//   Extends ISubscription<TFunc> {
//   Fire: TFunc
// }
// /**
//  * IDESTRØYÅBLE
//  * ┌────────────────┐
//  * │ ┏━━━━━┓        │
//  * │ ┃ ○ ○ ┃        │  ┏━━━━━┓           ┌╲╌╌╱╌┐
//  * │ ┃ ○ ○ ┃    x 1 │  ┃ ○ ○ ┃ destroy() ┊ ╲╱  ╵
//  * │ ┠─────┨        │  ┃ ○ ○ ┃  ╭───╯╲   ╷ ╱╲  ┊
//  * │ ┗━━━━━┛        │  ┠─────┨  ╰───╮╱   ├╱ ╌╲ ┤
//  * │ destroy()  x 1 │  ┗━━━━━┛           └ ╌╌ ╌┘
//  * └────────────────┘
//  */
// Export interface IDestroyable {
//   Destroy(): void
// }
// Export interface IDropdownApi {
//   ApplyOptions(options: DropdownUpdateParams): void
//   Remove(): void
// }
// Export interface IExecutionLineAdapter {
//   Remove(): void
//   GetPrice(): number
//   SetPrice(value: number): this
//   GetTime(): number
//   SetTime(value: number): this
//   GetDirection(): Direction
//   SetDirection(value: Direction): this
//   GetText(): string
//   SetText(value: string): this
//   GetTooltip(): string
//   SetTooltip(value: string): this
//   GetArrowHeight(): number
//   SetArrowHeight(value: number): this
//   GetArrowSpacing(): number
//   SetArrowSpacing(value: number): this
//   GetFont(): string
//   SetFont(value: string): this
//   GetTextColor(): string
//   SetTextColor(value: string): this
//   GetArrowColor(): string
//   SetArrowColor(value: string): this
// }
// Export interface IExternalDatafeed {
//   OnReady(callback: OnReadyCallback): void
// }
// Export interface IExternalSaveLoadAdapter {
//   GetAllCharts(): Promise<ChartMetaInfo[]>
//   RemoveChart<T extends number | string>(id: T): Promise<void>
//   SaveChart(chartData: ChartData): Promise<string>
//   GetChartContent(chartId: number): Promise<string>
//   GetAllStudyTemplates(): Promise<StudyTemplateMetaInfo[]>
//   RemoveStudyTemplate(studyTemplateInfo: StudyTemplateMetaInfo): Promise<void>
//   SaveStudyTemplate(studyTemplateData: StudyTemplateData): Promise<void>
//   GetStudyTemplateContent(
//     StudyTemplateInfo: StudyTemplateMetaInfo
//   ): Promise<string>
//   GetDrawingTemplates(toolName: string): Promise<string[]>
//   LoadDrawingTemplate(toolName: string, templateName: string): Promise<string>
//   RemoveDrawingTemplate(toolName: string, templateName: string): Promise<void>
//   SaveDrawingTemplate(
//     ToolName: string,
//     TemplateName: string,
//     Content: string
//   ): Promise<void>
// }
// Export interface IFormatter<T> {
//   Format(value?: T): string
//   Parse?(
//     Value: string
//   ): ErrorFormatterParseResult | SuccessFormatterParseResult<T>
// }
// Export interface ILineDataSourceApi {
//   IsSelectionEnabled(): boolean
//   SetSelectionEnabled(enable: boolean): void
//   IsSavingEnabled(): boolean
//   SetSavingEnabled(enable: boolean): void
//   IsShowInObjectsTreeEnabled(): boolean
//   SetShowInObjectsTreeEnabled(enabled: boolean): void
//   IsUserEditEnabled(): boolean
//   SetUserEditEnabled(enabled: boolean): void
//   BringToFront(): void
//   SendToBack(): void
//   GetProperties(): AnyRecord
//   SetProperties(newProperties: object): void
//   GetPoints(): PricedPoint[]
//   SetPoints(points: ShapePoint[]): void
// }
// Export interface IMenuItem {
//   Readonly type: MenuItemType
//   /**
//    * An unique ID of an action item. Could be used to distinguish actions between each other.
//    */
//   Readonly id: string
// }
// Export interface INewsApi {
//   Refresh(): void
// }
// Export interface IObservable<T> {
//   Subscribe(callback: (value: T) => void): void
//   Unsubscribe(callback: (value: T) => void): void
// }
// Export interface IObservableValue<T> extends IBoxedValue<T>, IObservable<T> {}
// Export interface IObservableValueReadOnly<T>
//   Extends IBoxedValueReadOnly<T>,
//     IObservable<T> {}
// Export interface IOrderLineAdapter {
//   Remove(): void
//   OnModify(callback: () => void): this
//   OnModify<T>(data: T, callback: (data: T) => void): this
//   OnMove(callback: () => void): this
//   OnMove<T>(data: T, callback: (data: T) => void): this
//   OnCancel(callback: () => void): this
//   OnCancel<T>(data: T, callback: (data: T) => void): this
//   GetPrice(): number
//   SetPrice(value: number): this
//   GetText(): string
//   SetText(value: string): this
//   GetTooltip(): string
//   SetTooltip(value: string): this
//   GetModifyTooltip(): string
//   SetModifyTooltip(value: string): this
//   GetCancelTooltip(): string
//   SetCancelTooltip(value: string): this
//   GetQuantity(): string
//   SetQuantity(value: string): this
//   GetEditable(): boolean
//   SetEditable(value: boolean): this
//   GetCancellable(): boolean
//   SetCancellable(value: boolean): this
//   GetExtendLeft(): boolean
//   SetExtendLeft(value: boolean): this
//   GetLineLength(): number
//   SetLineLength(value: number): this
//   GetLineStyle(): number
//   SetLineStyle(value: number): this
//   GetLineWidth(): number
//   SetLineWidth(value: number): this
//   GetBodyFont(): string
//   SetBodyFont(value: string): this
//   GetQuantityFont(): string
//   SetQuantityFont(value: string): this
//   GetLineColor(): string
//   SetLineColor(value: string): this
//   GetBodyBorderColor(): string
//   SetBodyBorderColor(value: string): this
//   GetBodyBackgroundColor(): string
//   SetBodyBackgroundColor(value: string): this
//   GetBodyTextColor(): string
//   SetBodyTextColor(value: string): this
//   GetQuantityBorderColor(): string
//   SetQuantityBorderColor(value: string): this
//   GetQuantityBackgroundColor(): string
//   SetQuantityBackgroundColor(value: string): this
//   GetQuantityTextColor(): string
//   SetQuantityTextColor(value: string): this
//   GetCancelButtonBorderColor(): string
//   SetCancelButtonBorderColor(value: string): this
//   GetCancelButtonBackgroundColor(): string
//   SetCancelButtonBackgroundColor(value: string): this
//   GetCancelButtonIconColor(): string
//   SetCancelButtonIconColor(value: string): this
// }
// Export interface IPaneApi {
//   HasMainSeries(): boolean
//   GetLeftPriceScales(): readonly IPriceScaleApi[]
//   GetRightPriceScales(): readonly IPriceScaleApi[]
//   GetMainSourcePriceScale(): IPriceScaleApi | null
//   GetHeight(): number
//   SetHeight(height: number): void
//   MoveTo(paneIndex: number): void
//   PaneIndex(): number
// }
// Export interface IPositionLineAdapter {
//   Remove(): void
//   OnClose(callback: () => void): this
//   OnClose<T>(data: T, callback: (data: T) => void): this
//   OnModify(callback: () => void): this
//   OnModify<T>(data: T, callback: (data: T) => void): this
//   OnReverse(callback: () => void): this
//   OnReverse<T>(data: T, callback: (data: T) => void): this
//   GetPrice(): number
//   SetPrice(value: number): this
//   GetText(): string
//   SetText(value: string): this
//   GetTooltip(): string
//   SetTooltip(value: string): this
//   GetProtectTooltip(): string
//   SetProtectTooltip(value: string): this
//   GetCloseTooltip(): string
//   SetCloseTooltip(value: string): this
//   GetReverseTooltip(): string
//   SetReverseTooltip(value: string): this
//   GetQuantity(): string
//   SetQuantity(value: string): this
//   GetExtendLeft(): boolean
//   SetExtendLeft(value: boolean): this
//   GetLineLength(): number
//   SetLineLength(value: number): this
//   GetLineStyle(): number
//   SetLineStyle(value: number): this
//   GetLineWidth(): number
//   SetLineWidth(value: number): this
//   GetBodyFont(): string
//   SetBodyFont(value: string): this
//   GetQuantityFont(): string
//   SetQuantityFont(value: string): this
//   GetLineColor(): string
//   SetLineColor(value: string): this
//   GetBodyBorderColor(): string
//   SetBodyBorderColor(value: string): this
//   GetBodyBackgroundColor(): string
//   SetBodyBackgroundColor(value: string): this
//   GetBodyTextColor(): string
//   SetBodyTextColor(value: string): this
//   GetQuantityBorderColor(): string
//   SetQuantityBorderColor(value: string): this
//   GetQuantityBackgroundColor(): string
//   SetQuantityBackgroundColor(value: string): this
//   GetQuantityTextColor(): string
//   SetQuantityTextColor(value: string): this
//   GetReverseButtonBorderColor(): string
//   SetReverseButtonBorderColor(value: string): this
//   GetReverseButtonBackgroundColor(): string
//   SetReverseButtonBackgroundColor(value: string): this
//   GetReverseButtonIconColor(): string
//   SetReverseButtonIconColor(value: string): this
//   GetCloseButtonBorderColor(): string
//   SetCloseButtonBorderColor(value: string): this
//   GetCloseButtonBackgroundColor(): string
//   SetCloseButtonBackgroundColor(value: string): this
//   GetCloseButtonIconColor(): string
//   SetCloseButtonIconColor(value: string): this
// }
// Export interface IPriceFormatter extends ISymbolValueFormatter {
//   Format(
//     Price: number,
//     SignPositive?: boolean,
//     TailSize?: number,
//     SignNegative?: boolean,
//     UseRtlFormat?: boolean
//   ): string
// }
// Export interface IPriceScaleApi {
//   GetMode(): PriceScaleMode
//   SetMode(newMode: PriceScaleMode): void
//   IsInverted(): boolean
//   SetInverted(isInverted: boolean): void
//   GetVisiblePriceRange(): VisiblePriceRange | null
//   SetVisiblePriceRange(range: VisiblePriceRange): void
//   HasMainSeries(): boolean
//   GetStudies(): EntityId[]
// }
// Export interface ISelectionApi {
//   Add(entities: EntityId[] | EntityId): void
//   Set(entities: EntityId[] | EntityId): void
//   Remove(entities: EntityId[]): void
//   Contains(entity: EntityId): boolean
//   AllSources(): EntityId[]
//   IsEmpty(): boolean
//   Clear(): void
//   OnChanged(): ISubscription<() => void>
//   CanBeAddedToSelection(entity: EntityId): boolean
// }
// Export interface ISeparator extends IMenuItem {
//   Readonly type: MenuItemType.Separator
// }
// Export interface ISeriesApi {
//   IsUserEditEnabled(): boolean
//   SetUserEditEnabled(enabled: boolean): void
//   MergeUp(): void
//   MergeDown(): void
//   UnmergeUp(): void
//   UnmergeDown(): void
//   DetachToRight(): void
//   DetachToLeft(): void
//   DetachNoScale(): void
//   ChangePriceScale(newPriceScale: SeriesPriceScale): void
//   IsVisible(): boolean
//   SetVisible(visible: boolean): void
//   BringToFront(): void
//   SendToBack(): void
//   EntityId(): EntityId
//   ChartStyleProperties<T extends ChartStyle>(
//     ChartStyle: T
//   ): SeriesPreferencesMap[T]
//   SetChartStyleProperties<T extends ChartStyle>(
//     ChartStyle: T,
//     NewPrefs: Partial<SeriesPreferencesMap[T]>
//   ): void
// }
// Export interface ISettingsAdapter {
//   InitialSettings?: InitialSettingsMap
//   SetValue(key: string, value: string): void
//   RemoveValue(key: string): void
// }
// Export interface IShapesGroupControllerApi {
//   CreateGroupFromSelection(): ShapesGroupId
//   RemoveGroup(groupId: ShapesGroupId): void
//   Groups(): readonly ShapesGroupId[]
//   ShapesInGroup(groupId: ShapesGroupId): readonly EntityId[]
//   ExcludeShapeFromGroup(groupId: ShapesGroupId, shapeId: EntityId): void
//   AvailableZOrderOperations(groupId: ShapesGroupId): AvailableZOrderOperations
//   BringToFront(groupId: ShapesGroupId): void
//   SendToBack(groupId: ShapesGroupId): void
//   BringForward(groupId: ShapesGroupId): void
//   SendBackward(groupId: ShapesGroupId): void
//   InsertAfter(groupId: ShapesGroupId, target: ShapesGroupId | EntityId): void
//   InsertBefore(groupId: ShapesGroupId, target: ShapesGroupId | EntityId): void
//   SetGroupVisibility(groupId: ShapesGroupId, value: boolean): void
//   GroupVisibility(groupId: ShapesGroupId): GroupVisibilityState
//   SetGroupLock(groupId: ShapesGroupId, value: boolean): void
//   GroupLock(groupId: ShapesGroupId): GroupLockState
//   GetGroupName(groupId: ShapesGroupId): string
//   SetGroupName(groupId: ShapesGroupId, name: string): void
//   CanBeGroupped(shapes: readonly EntityId[]): boolean
// }
// Export interface IStudyApi {
//   IsUserEditEnabled(): boolean
//   SetUserEditEnabled(enabled: boolean): void
//   GetInputsInfo(): StudyInputInfo[]
//   GetInputValues(): StudyInputValueItem[]
//   SetInputValues(values: StudyInputValueItem[]): void
//   MergeUp(): void
//   MergeDown(): void
//   UnmergeUp(): void
//   UnmergeDown(): void
//   ChangePriceScale(newPriceScale: StudyPriceScale | EntityId): void
//   IsVisible(): boolean
//   SetVisible(visible: boolean): void
//   BringToFront(): void
//   SendToBack(): void
//   ApplyOverrides<TOverrides extends StudyOverrides>(overrides: TOverrides): void
//   ApplyToEntireLayout(): void
//   OnDataLoaded(): ISubscription<() => void>
//   OnStudyError(): ISubscription<() => void>
// }
// Export interface ISubscription<TFunc extends Function> {
//   Subscribe(obj: object | null, member: TFunc, singleshot?: boolean): void
//   Unsubscribe(obj: object | null, member: TFunc): void
//   UnsubscribeAll(obj: object | null): void
// }
// Export interface ISymbolValueFormatter {
//   Format(price: number, signPositive?: boolean): string
// }
// Export interface ITimeScaleApi {
//   CoordinateToTime(x: number): number | null
//   /**
//    * This is to detect when the chart has been zoomed in/out
//    */
//   BarSpacingChanged(): ISubscription<(newBarSpacing: number) => void>
//   /**
//    * This is to detect when the chart has been scrolled left/right
//    */
//   RightOffsetChanged(): ISubscription<(rightOffset: number) => void>
//   SetRightOffset(offset: number): void
//   SetBarSpacing(newBarSpacing: number): void
//   BarSpacing(): number
//   RightOffset(): number
//   Width(): number
//   DefaultRightOffset(): IWatchedValue<number>
// }
// Export interface ITimezoneApi {
//   AvailableTimezones(): readonly TimezoneInfo[]
//   GetTimezone(): TimezoneInfo
//   SetTimezone(timezone: TimezoneId, options?: UndoOptions): void
//   OnTimezoneChanged(): ISubscription<(timezone: TimezoneId) => void>
// }
// Export interface IUpdatableAction extends IAction {
//   Update(options: Partial<ActionOptions>): void
// }
// Export interface IWatchListApi {
//   DefaultList(): string[]
//   GetList(id?: string): string[] | null
//   GetAllLists(): WatchListSymbolListMap | null
//   SetActiveList(id: string): void
//   GetActiveListId(): string | null
//   SetList(symbols: string[]): void
//   UpdateList(listId: string, symbols: string[]): void
//   RenameList(listId: string, newName: string): void
//   CreateList(listName?: string, symbols?: string[]): WatchListSymbolList | null
//   SaveList(list: WatchListSymbolList): boolean
//   DeleteList(listId: string): void
//   OnListChanged(): ISubscription<WatchListSymbolListChangedCallback>
//   OnActiveListChanged(): ISubscription<EmptyCallback>
//   OnListAdded(): ISubscription<WatchListSymbolListAddedCallback>
//   OnListRemoved(): ISubscription<WatchListSymbolListRemovedCallback>
//   OnListRenamed(): ISubscription<WatchListSymbolListRenamedCallback>
// }
// Export interface IWatchedValue<T>
//   Extends IWatchedValueReadonly<T>,
//     IObservableValue<T> {
//   SetValue(value: T, forceUpdate?: boolean): void
//   Subscribe(
//     Callback: WatchedValueCallback<T>,
//     Options?: WatchedValueSubscribeOptions
//   ): void
//   Unsubscribe(callback?: WatchedValueCallback<T> | null): void
// }
// Export interface IWatchedValueReadonly<T> extends IObservableValueReadOnly<T> {
//   Subscribe(
//     Callback: (value: T) => void,
//     Options?: WatchedValueSubscribeOptions
//   ): void
//   Unsubscribe(callback?: ((value: T) => void) | null): void
// }
// Export interface IWidgetbarApi extends IDestroyable {
//   ShowPage(pageName: PageName): void
//   HidePage(pageName: PageName): void
//   IsPageVisible(pageName: PageName): boolean
// }
// Export interface InitialSettingsMap {
//   [key: string]: string
// }
// Export interface InstrumentInfo {
//   Qty: QuantityMetainfo
//   PipValue: number
//   PipSize: number
//   MinTick: number
//   LotSize?: number
//   Type?: SymbolType
//   Units?: string
//   BrokerSymbol?: string
//   Description: string
//   DomVolumePrecision?: number
//   Leverage?: string
//   MarginRate?: number
//   LimitPriceStep?: number
//   StopPriceStep?: number
//   AllowedDurations?: string[]
//   Currency?: string
//   BaseCurrency?: string
//   QuoteCurrency?: string
//   BigPointValue?: number
// }
// Export interface IsTradableResult {
//   Tradable: boolean
//   Reason?: string
//   Solutions?: TradableSolutions
//   ShortReason?: string
// }
// Export interface KagiStylePreferences {
//   UpColor: string
//   DownColor: string
//   UpColorProjection: string
//   DownColorProjection: string
// }
// Export interface LeverageInfo {
//   Title: string
//   Leverage: number
//   Min: number
//   Max: number
//   Step: number
// }
// Export interface LeverageInfoParams {
//   Symbol: string
//   OrderType: OrderType
//   Side: Side
//   CustomFields?: CustomInputFieldsValues
// }
// Export interface LeveragePreviewResult {
//   Infos?: string[]
//   Warnings?: string[]
//   Errors?: string[]
// }
// Export interface LeverageSetParams extends LeverageInfoParams {
//   Leverage: number
// }
// Export interface LeverageSetResult {
//   Leverage: number
// }
// Export interface LibrarySymbolInfo {
//   /**
//    * Symbol Name
//    */
//   Name: string
//   Full_name: string
//   Base_name?: [string]
//   /**
//    * Unique symbol id
//    */
//   Ticker?: string
//   Description: string
//   Type: string
//   /**
//    * @example "1700-0200"
//    */
//   Session: string
//   Session_display?: string
//   /** @deprecated Use session_holidays instead */
//   Holidays?: string
//   /**
//    * @example "20181105,20181107,20181112"
//    */
//   Session_holidays?: string
//   /**
//    * @example "1900F4-2350F4,1000-1845:20181113;1000-1400:20181114"
//    */
//   Corrections?: string
//   /**
//    * Traded exchange
//    * @example "NYSE"
//    */
//   Exchange: string
//   Listed_exchange: string
//   Timezone: Timezone
//   /**
//    * Prices format: "price" or "volume"
//    */
//   Format: SeriesFormat
//   /**
//    * Code (Tick)
//    * @example 8/16/.../256 (1/8/100 1/16/100 ... 1/256/100) or 1/10/.../10000000 (1 0.1 ... 0.0000001)
//    */
//   Pricescale: number
//   /**
//    * The number of units that make up one tick.
//    * @example For example, U.S. equities are quotes in decimals, and tick in decimals, and can go up +/- .01. So the tick increment is 1. But the e-mini S&P futures contract, though quoted in decimals, goes up in .25 increments, so the tick increment is 25. (see also Tick Size)
//    */
//   Minmov: number
//   Fractional?: boolean
//   /**
//    * @example Quarters of 1/32: pricescale=128, minmovement=1, minmovement2=4
//    */
//   Minmove2?: number
//   /**
//    * False if DWM only
//    */
//   Has_intraday?: boolean
//   /**
//    * An array of resolutions which should be enabled in resolutions picker for this symbol.
//    */
//   Supported_resolutions: ResolutionString[]
//   /**
//    * @example (for ex.: "1,5,60") - only these resolutions will be requested, all others will be built using them if possible
//    */
//   Intraday_multipliers?: string[]
//   Has_seconds?: boolean
//   Has_ticks?: boolean
//   /**
//    * It is an array containing seconds resolutions (in seconds without a postfix) the datafeed builds by itself.
//    */
//   Seconds_multipliers?: string[]
//   Has_daily?: boolean
//   Has_weekly_and_monthly?: boolean
//   Has_empty_bars?: boolean
//   /**
//    * @deprecated
//    * Use visible_plots_set instead
//    */
//   Has_no_volume?: boolean
//   /**
//    * Represents what values are supported by the symbol
//    */
//   Visible_plots_set?: VisiblePlotsSet
//   /**
//    * Integer showing typical volume value decimal places for this symbol
//    */
//   Volume_precision?: number
//   Data_status?: 'streaming' | 'endofday' | 'pulsed' | 'delayed_streaming'
//   /**
//    * Boolean showing whether this symbol is expired futures contract or not.
//    */
//   Expired?: boolean
//   /**
//    * Unix timestamp of expiration date.
//    */
//   Expiration_date?: number
//   Sector?: string
//   Industry?: string
//   Currency_code?: string
//   Original_currency_code?: string
//   Unit_id?: string
//   Original_unit_id?: string
//   Unit_conversion_types?: string[]
// }
// Export interface LineBreakStylePreferences {
//   UpColor: string
//   DownColor: string
//   BorderUpColor: string
//   BorderDownColor: string
//   UpColorProjection: string
//   DownColorProjection: string
//   BorderUpColorProjection: string
//   BorderDownColorProjection: string
// }
// Export interface LineStylePreferences {
//   Color: string
//   Linestyle: number
//   Linewidth: number
//   StyleType: number
// }
// Export interface LoadingScreenOptions {
//   ForegroundColor?: string
//   BackgroundColor?: string
// }
// Export interface Mark {
//   Id: string | number
//   Time: number
//   Color: MarkConstColors | MarkCustomColor
//   Text: string
//   Label: string
//   LabelFontColor: string
//   MinSize: number
// }
// Export interface MarkCustomColor {
//   Color: string
//   Background: string
// }
// Export interface MenuSeparator extends ActionDescription {
//   Separator: boolean
// }
// Export interface MouseEventParams {
//   ClientX: number
//   ClientY: number
//   PageX: number
//   PageY: number
//   ScreenX: number
//   ScreenY: number
// }
// Export interface NegativeBaseInputFieldValidatorResult
//   Extends BaseInputFieldValidatorResult {
//   Valid: false
//   ErrorMessage: string
// }
// Export interface NewsItem {
//   Title: string
//   Source: string
//   Published: number
//   Link?: string
//   ShortDescription?: string
//   FullDescription?: string
// }
// Export interface NumericFormattingParams {
//   Decimal_sign: string
// }
// Export type OrderDialogOptions = TradingDialogOptions
// Export interface OrderDuration {
//   /**
//    * Type is OrderDurationMetaInfo.value
//    */
//   Type: string
//   Datetime?: number
// }
// Export interface OrderDurationMetaInfo {
//   HasDatePicker?: boolean
//   HasTimePicker?: boolean
//   Default?: boolean
//   Name: string
//   Value: string
//   SupportedOrderTypes?: OrderType[]
// }
// Export interface OrderOrPositionMessage {
//   Type: OrderOrPositionMessageType
//   Text: string
// }
// Export interface OrderPreviewResult {
//   Sections: OrderPreviewSection[]
//   ConfirmId?: string
//   Warnings?: string[]
//   Errors?: string[]
// }
// Export interface OrderPreviewSection {
//   Rows: OrderPreviewSectionRow[]
//   Header?: string
// }
// Export interface OrderPreviewSectionRow {
//   Title: string
//   Value: string
// }
// Export interface OrderRule {
//   Id: string
//   Severity: 'warning' | 'error'
// }
// Export interface OrderTableColumn extends AccountManagerColumn {
//   SupportedStatusFilters?: OrderStatusFilter[]
// }
// /**
//  * Input value of the order ticket
//  * This info is not sufficient to place an order
//  */
// Export interface OrderTemplate {
//   Symbol: string
//   Type?: OrderType
//   Side?: Side
//   Qty?: number
//   StopPrice?: number
//   LimitPrice?: number
//   TakeProfit?: number
//   StopLoss?: number
//   TrailingStopPips?: number
//   Duration?: OrderDuration
//   CustomFields?: CustomInputFieldsValues
// }
// Export interface Overrides {
//   [key: string]: string | number | boolean
// }
// Export interface PeriodParams {
//   From: number
//   To: number
//   CountBack: number
//   FirstDataRequest: boolean
// }
// Export interface PipValues {
//   BuyPipValue: number
//   SellPipValue: number
// }
// Export interface PlaceOrderResult {
//   OrderId?: string
// }
// /**
//  * Info about a placed order
//  */
// Export interface PlacedOrder extends CustomFields {
//   Id: string
//   Symbol: string
//   Type: OrderType
//   Side: Side
//   Qty: number
//   Status: OrderStatus
//   StopLoss?: number
//   TrailingStopPips?: number
//   StopType?: StopType
//   TakeProfit?: number
//   Duration?: OrderDuration
//   CustomFields?: CustomInputFieldsValues
//   FilledQty?: number
//   AvgPrice?: number
//   UpdateTime?: number /** unix timestamp in milliseconds */
//   LimitPrice?: number
//   StopPrice?: number
//   Message?: OrderOrPositionMessage
// }
// Export interface PlusClickParams extends MouseEventParams {
//   Symbol: string | null
//   Price: number
// }
// Export interface PnFStylePreferences {
//   UpColor: string
//   DownColor: string
//   UpColorProjection: string
//   DownColorProjection: string
// }
// Export interface Position {
//   Id: string
//   Symbol: string
//   Qty: number
//   ShortQty?: number
//   LongQty?: number
//   Side: Side
//   AvgPrice: number
//   Message?: OrderOrPositionMessage
//   [key: string]: any
// }
// Export type PositionDialogOptions = TradingDialogOptions
// Export interface PositiveBaseInputFieldValidatorResult
//   Extends BaseInputFieldValidatorResult {
//   Valid: true
// }
// /**
//  * Output value of the order ticket and input value of the broker's place order command
//  * This info is sufficient to place an order
//  */
// Export interface PreOrder extends OrderTemplate {
//   Symbol: string
//   Type: OrderType
//   Side: Side
//   Qty: number
//   SeenPrice: number | null
//   IsClose?: boolean
// }
// Export interface PricedPoint extends TimePoint {
//   Price: number
// }
// Export interface QuantityMetainfo {
//   Min: number
//   Max: number
//   Step: number
//   UiStep?: number
//   Default?: number
// }
// Export interface QuoteErrorData {
//   S: 'error'
//   N: string
//   V: object
// }
// Export interface QuoteOkData {
//   S: 'ok'
//   N: string
//   V: DatafeedQuoteValues
// }
// Export interface RenkoStylePreferences {
//   UpColor: string
//   DownColor: string
//   BorderUpColor: string
//   BorderDownColor: string
//   UpColorProjection: string
//   DownColorProjection: string
//   BorderUpColorProjection: string
//   BorderDownColorProjection: string
//   WickUpColor: string
//   WickDownColor: string
// }
// Export interface RestBrokerConnectionInfo {
//   Url: string
//   Access_token: string
// }
// Export interface RssNewsFeedInfo {
//   Url: string
//   Name: string
// }
// Export interface RssNewsFeedParams {
//   Default: RssNewsFeedItem
//   [symbolType: string]: RssNewsFeedItem
// }
// Export interface SaveChartToServerOptions {
//   ChartName?: string
//   DefaultChartName?: string
// }
// Export interface SaveLoadChartRecord {
//   Id: string
//   Name: string
//   Image_url: string
//   Modified_iso: number
//   Short_symbol: string
//   Interval: ResolutionString
// }
// Export interface SavedStateMetaInfo {
//   Uid: number
//   Name: string
//   Description: string
// }
export interface SearchSymbolResultItem {
  symbol: string
  full_name: string
  description: string
  exchange: string
  ticker: string
  type: string
}
// Export interface SeriesFieldDescriptor {
//   Type: 'value'
//   SourceType: 'series'
//   PlotTitle: string
//   SourceTitle: string
// }
// Export interface SeriesPreferencesMap {
//   [ChartStyle.Bar]: BarStylePreferences
//   [ChartStyle.Candle]: CandleStylePreferences
//   [ChartStyle.Line]: LineStylePreferences
//   [ChartStyle.Area]: AreaStylePreferences
//   [ChartStyle.Renko]: RenkoStylePreferences
//   [ChartStyle.Kagi]: KagiStylePreferences
//   [ChartStyle.PnF]: PnFStylePreferences
//   [ChartStyle.LineBreak]: LineBreakStylePreferences
//   [ChartStyle.HeikinAshi]: HeikinAshiStylePreferences
//   [ChartStyle.HollowCandle]: HollowCandleStylePreferences
//   [ChartStyle.Baseline]: BaselineStylePreferences
//   [ChartStyle.HiLo]: HiLoStylePreferences
// }
// Export interface SetVisibleRangeOptions {
//   ApplyDefaultRightMargin?: boolean
//   PercentRightMargin?: number
// }
// Export interface SingleBrokerMetaInfo {
//   ConfigFlags: BrokerConfigFlags
//   CustomNotificationFields?: string[]
//   Durations?: OrderDurationMetaInfo[]
//   PositionDialogOptions?: PositionDialogOptions
//   OrderRules?: OrderRule[]
//   CustomUI?: BrokerCustomUI
// }
// Export interface SortingParameters {
//   ColumnId: string
//   Asc?: boolean
// }
// Export interface StickedPoint extends TimePoint {
//   Channel: 'open' | 'high' | 'low' | 'close'
// }
// Export interface StudyFieldDescriptor {
//   Type: 'value'
//   SourceType: 'study'
//   SourceId: string
//   SourceTitle: string
//   PlotTitle: string
// }
// Export interface StudyInputInfo {
//   Id: StudyInputId
//   Name: string
//   Type: string
//   LocalizedName: string
// }
// Export interface StudyInputValueItem {
//   Id: StudyInputId
//   Value: StudyInputValue
// }
// Export interface StudyOrDrawingAddedToChartEventParams {
//   Value: string
// }
// Export interface StudyOverrides {
//   [key: string]: StudyOverrideValueType
// }
// Export interface StudyTemplateData {
//   Name: string
//   Content: string
// }
// Export interface StudyTemplateMetaInfo {
//   Name: string
// }
// Export interface SubscribeEventsMap {
//   'toggle_sidebar': (isHidden: boolean) => void
//   'indicators_dialog': EmptyCallback
//   'toggle_header': (isHidden: boolean) => void
//   'edit_object_dialog': (params: EditObjectDialogEventParams) => void
//   'chart_load_requested': (savedData: object) => void
//   'chart_loaded': EmptyCallback
//   'mouse_down': (params: MouseEventParams) => void
//   'mouse_up': (params: MouseEventParams) => void
//   'drawing': (params: StudyOrDrawingAddedToChartEventParams) => void
//   'study': (params: StudyOrDrawingAddedToChartEventParams) => void
//   'undo': EmptyCallback
//   'redo': EmptyCallback
//   'undo_redo_state_changed': (state: UndoRedoState) => void
//   'reset_scales': EmptyCallback
//   'compare_add': EmptyCallback
//   'add_compare': EmptyCallback
//   'load_study template': EmptyCallback
//   'onTick': (tick: Bar) => void
//   'onAutoSaveNeeded': EmptyCallback
//   'onScreenshotReady': (url: string) => void
//   'onMarkClick': (markId: Mark['id']) => void
//   'onPlusClick': (params: PlusClickParams) => void
//   'onTimescaleMarkClick': (markId: TimescaleMark['id']) => void
//   'onSelectedLineToolChanged': EmptyCallback
//   'layout_about_to_be_changed': (newLayoutType: LayoutType) => void
//   'layout_changed': EmptyCallback
//   'activeChartChanged': (chartIndex: number) => void
//   'series_event': (seriesEventType: SeriesEventType) => void
//   'study_event': (entityId: EntityId, studyEventType: StudyEventType) => void
//   'drawing_event': (
//     SourceId: EntityId,
//     DrawingEventType: DrawingEventType
//   ) => void
//   'study_properties_changed': (id: EntityId) => void
//   'series_properties_changed': (id: EntityId) => void
//   'panes_height_changed': () => void
//   'panes_order_changed': () => void
// }
// Export interface SuccessFormatterParseResult<T> extends FormatterParseResult {
//   Res: true
//   Value: T
//   Suggest?: string
// }
// Export interface SymbolExt {
//   Symbol: string
//   Full_name: string
//   Exchange: string
//   Description: string
//   Type: string
//   Pro_name: string
// }
// Export interface SymbolIntervalResult {
//   Symbol: string
//   Interval: ResolutionString
// }
// Export interface SymbolResolveExtension {
//   CurrencyCode?: string
//   UnitId?: string
// }
// Export interface TextWithCheckboxFieldCustomInfo {
//   CheckboxTitle: string
//   Asterix?: boolean
// }
// Export interface TextWithCheckboxFieldMetaInfo
//   Extends CustomInputFieldMetaInfo {
//   InputType: 'TextWithCheckBox'
//   Value: TextWithCheckboxValue
//   CustomInfo: TextWithCheckboxFieldCustomInfo
//   Validator?: TextInputFieldValidator
// }
// Export interface TextWithCheckboxValue {
//   Text: string
//   Checked: boolean
// }
// Export interface TimeFieldDescriptor {
//   Type: 'time'
// }
// Export interface TimeFrameItem {
//   Text: string
//   Resolution: ResolutionString
//   Description?: string
//   Title?: string
// }
// Export interface TimeFramePeriodBack {
//   Type: TimeFrameType.PeriodBack
//   Value: string
// }
// Export interface TimeFrameTimeRange {
//   Type: TimeFrameType.TimeRange
//   From: number
//   To: number
// }
// Export interface TimePoint {
//   Time: number
// }
// Export interface TimeScaleOptions {
//   Min_bar_spacing?: number
// }
// Export interface TimescaleMark {
//   Id: string | number
//   Time: number
//   Color: MarkConstColors | string
//   Label: string
//   Tooltip: string[]
// }
// Export interface TimezoneInfo {
//   Id: TimezoneId
//   Title: string
//   Offset?: number
// }
// Export interface Trade extends CustomFields {
//   Id: string
//   Date: number
//   Symbol: string
//   Qty: number
//   Side: Side
//   Price: number
// }
// Export interface TradeContext {
//   Symbol: string
//   DisplaySymbol: string
//   Value: number | null
//   FormattedValue: string
//   Last: number
// }
// Export interface TradingCustomization {
//   Position: Overrides
//   Order: Overrides
// }
// Export interface TradingDialogOptions {
//   CustomFields?: TradingDialogCustomField[]
// }
// Export interface TradingQuotes {
//   Trade?: number
//   Size?: number
//   Bid?: number
//   Bid_size?: number
//   Ask?: number
//   Ask_size?: number
//   Spread?: number
//   IsDelayed?: boolean
// }
// Export interface TradingTerminalWidgetOptions
//   Extends ChartingLibraryWidgetOptions {
//   BrokerConfig?: SingleBrokerMetaInfo
//   Broker_config?: SingleBrokerMetaInfo
//   RestConfig?: RestBrokerConnectionInfo
//   Widgetbar?: WidgetBarParams
//   Rss_news_feed?: RssNewsFeedParams
//   News_provider?: GetNewsFunction
//   Trading_customization?: TradingCustomization
//   BrokerFactory?(
//     Host: IBrokerConnectionAdapterHost
//   ): IBrokerWithoutRealtime | IBrokerTerminal
//   Broker_factory?(
//     Host: IBrokerConnectionAdapterHost
//   ): IBrokerWithoutRealtime | IBrokerTerminal
// }
// Export interface TranslateOptions {
//   Plural?: string
//   Count?: number
//   Context?: string
//   Replace?: Record<string, string>
// }
// Export interface UndoOptions {
//   DisableUndo?: boolean
// }
// Export interface UndoRedoState {
//   Readonly enableUndo: boolean
//   Readonly undoText: string | undefined
//   Readonly enableRedo: boolean
//   Readonly redoText: string | undefined
// }
// Export interface Unit {
//   Id: string
//   Name: string
//   Description: string
// }
// Export interface UserTimeFieldDescriptor {
//   Type: 'userTime'
// }
// Export interface VisiblePriceRange {
//   From: number
//   To: number
// }
// Export interface VisibleTimeRange {
//   From: number
//   To: number
// }
// Export interface WatchListSymbolList extends WatchListSymbolListData {
//   Id: string
// }
// Export interface WatchListSymbolListData {
//   Symbols: string[]
//   Title: string
// }
// Export interface WatchListSymbolListMap {
//   [listId: string]: WatchListSymbolList
// }
// Export interface WatchedValueSubscribeOptions {
//   Once?: boolean
//   CallWithLast?: boolean
// }
// Export interface WidgetBarParams {
//   Details?: boolean
//   Watchlist?: boolean
//   News?: boolean
//   Datawindow?: boolean
//   Watchlist_settings?: {
//     Default_symbols: string[]
//     Readonly?: boolean
//   }
// }
// Export type CustomTimezones =
//   | 'Africa/Cairo'
//   | 'Africa/Johannesburg'
//   | 'Africa/Lagos'
//   | 'America/Argentina/Buenos_Aires'
//   | 'America/Bogota'
//   | 'America/Caracas'
//   | 'America/Chicago'
//   | 'America/El_Salvador'
//   | 'America/Juneau'
//   | 'America/Lima'
//   | 'America/Los_Angeles'
//   | 'America/Mexico_City'
//   | 'America/New_York'
//   | 'America/Phoenix'
//   | 'America/Santiago'
//   | 'America/Sao_Paulo'
//   | 'America/Toronto'
//   | 'America/Vancouver'
//   | 'Asia/Almaty'
//   | 'Asia/Ashkhabad'
//   | 'Asia/Bahrain'
//   | 'Asia/Bangkok'
//   | 'Asia/Chongqing'
//   | 'Asia/Dubai'
//   | 'Asia/Ho_Chi_Minh'
//   | 'Asia/Hong_Kong'
//   | 'Asia/Jakarta'
//   | 'Asia/Jerusalem'
//   | 'Asia/Karachi'
//   | 'Asia/Kathmandu'
//   | 'Asia/Kolkata'
//   | 'Asia/Kuwait'
//   | 'Asia/Manila'
//   | 'Asia/Muscat'
//   | 'Asia/Qatar'
//   | 'Asia/Riyadh'
//   | 'Asia/Seoul'
//   | 'Asia/Shanghai'
//   | 'Asia/Singapore'
//   | 'Asia/Taipei'
//   | 'Asia/Tehran'
//   | 'Asia/Tokyo'
//   | 'Atlantic/Reykjavik'
//   | 'Australia/ACT'
//   | 'Australia/Adelaide'
//   | 'Australia/Brisbane'
//   | 'Australia/Perth'
//   | 'Australia/Sydney'
//   | 'Europe/Amsterdam'
//   | 'Europe/Athens'
//   | 'Europe/Belgrade'
//   | 'Europe/Berlin'
//   | 'Europe/Bratislava'
//   | 'Europe/Brussels'
//   | 'Europe/Bucharest'
//   | 'Europe/Copenhagen'
//   | 'Europe/Dublin'
//   | 'Europe/Helsinki'
//   | 'Europe/Istanbul'
//   | 'Europe/Lisbon'
//   | 'Europe/London'
//   | 'Europe/Luxembourg'
//   | 'Europe/Madrid'
//   | 'Europe/Malta'
//   | 'Europe/Moscow'
//   | 'Europe/Oslo'
//   | 'Europe/Paris'
//   | 'Europe/Riga'
//   | 'Europe/Rome'
//   | 'Europe/Stockholm'
//   | 'Europe/Tallinn'
//   | 'Europe/Vilnius'
//   | 'Europe/Warsaw'
//   | 'Europe/Zurich'
//   | 'Pacific/Auckland'
//   | 'Pacific/Chatham'
//   | 'Pacific/Fakaofo'
//   | 'Pacific/Honolulu'
//   | 'Pacific/Norfolk'
//   | 'US/Mountain'

// Export as namespace TradingView

// Export {}
