import { isSymbol } from './symbol-helper.mjs'

it(isSymbol.name, () => {
  expect(isSymbol(Symbol('test'))).toBe(true)
  expect(isSymbol('test')).toBe(false)
  expect(isSymbol(123)).toBe(false)
  expect(isSymbol({})).toBe(false)
  expect(isSymbol([])).toBe(false)
  expect(isSymbol(undefined)).toBe(false)
  expect(isSymbol(null)).toBe(false)
  expect(isSymbol(new Date())).toBe(false)
  expect(isSymbol(() => {})).toBe(false)
  expect(isSymbol(Symbol.for('test'))).toBe(true)
  expect(isSymbol(Symbol.iterator)).toBe(true)
  expect(isSymbol(Symbol.asyncIterator)).toBe(true)
  expect(isSymbol(Symbol.hasInstance)).toBe(true)
  expect(isSymbol(Symbol.isConcatSpreadable)).toBe(true)
  expect(isSymbol(Symbol.match)).toBe(true)
  expect(isSymbol(Symbol.replace)).toBe(true)
  expect(isSymbol(Symbol.search)).toBe(true)
  expect(isSymbol(Symbol.species)).toBe(true)
  expect(isSymbol(Symbol.split)).toBe(true)
  expect(isSymbol(Symbol.toPrimitive)).toBe(true)
  expect(isSymbol(Symbol.toStringTag)).toBe(true)
  expect(isSymbol(Symbol.unscopables)).toBe(true)
  expect(isSymbol(Symbol.asyncDispose)).toBe(true)
  expect(isSymbol(Symbol.dispose)).toBe(true)
  // expect(isSymbol(Symbol.metadata)).toBe(false)
})
